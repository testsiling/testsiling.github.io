<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BUG DEVELOPER</title>
  
  <subtitle>Debugging the world</subtitle>
  <link href="http://testsiling.github.io/atom.xml" rel="self"/>
  
  <link href="http://testsiling.github.io/"/>
  <updated>2020-12-26T21:27:33.000Z</updated>
  <id>http://testsiling.github.io/</id>
  
  <author>
    <name>Siling Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Algorithm - Tree (3)</title>
    <link href="http://testsiling.github.io/2020/12/26/al-tree-3/"/>
    <id>http://testsiling.github.io/2020/12/26/al-tree-3/</id>
    <published>2020-12-26T21:27:33.000Z</published>
    <updated>2020-12-26T21:27:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Tree problem collection (3)</p><ul><li>99.Recover Binary Search Tree</li><li>94.Binary Tree Inorder Traversal</li><li>116.Populating Next Right Pointers in Each Node</li><li>114.Flatten Binary Tree to Linked List</li><li>654.Maximum Binary Tree</li><li>106.Construct Binary Tree from Inorder and Postorder Traversal</li></ul><a id="more"></a><p>Inorder (Left, Root, Right)<br>Preorder (Root, Left, Right)<br>Postorder (Left, Right, Root)</p><h2 id="99-Recover-Binary-Search-Tree"><a href="#99-Recover-Binary-Search-Tree" class="headerlink" title="99. Recover Binary Search Tree"></a>99. Recover Binary Search Tree</h2><p>In-order tranversal in a Binary Search Tree should get an ascending array. So when <script type="math/tex">Node_i < Node_{i-1}</script> means should swap.<br>x, y are pointer to error nodes, pre used to log the previous node val. node.val shoule always less than pre.val<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recoverTree</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findError</span>(<span class="params">node</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x, y, pre</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        findError(node.left)</span><br><span class="line">        <span class="keyword">if</span> pre <span class="keyword">and</span> node.val &lt; pre.val:</span><br><span class="line">            y = node</span><br><span class="line">            <span class="comment"># 1st error</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> x:</span><br><span class="line">                x = pre</span><br><span class="line">            <span class="comment"># 2nd error</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        pre = node</span><br><span class="line">        findError(node.right)</span><br><span class="line">    </span><br><span class="line">    x = y = pre = <span class="literal">None</span></span><br><span class="line">    findError(root)</span><br><span class="line">    x.val, y.val = y.val, x.val</span><br></pre></td></tr></table></figure></p><h2 id="94-Binary-Tree-Inorder-Traversal"><a href="#94-Binary-Tree-Inorder-Traversal" class="headerlink" title="94. Binary Tree Inorder Traversal"></a>94. Binary Tree Inorder Traversal</h2><p>Classic in-order search: left - root-right<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">root</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> res</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        traversal(root.left)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        traversal(root.right)</span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    traversal(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><h2 id="116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="116. Populating Next Right Pointers in Each Node"></a>116. Populating Next Right Pointers in Each Node</h2><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># connect local left, right</span></span><br><span class="line">    <span class="keyword">if</span> root.left:</span><br><span class="line">        root.left.next = root.right</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">and</span> root.next:</span><br><span class="line">        root.right.next = root.next.left</span><br><span class="line">    self.connect(root.left)</span><br><span class="line">    self.connect(root.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="BFS-deque"><a href="#BFS-deque" class="headerlink" title="BFS / deque"></a>BFS / deque</h3><p>using Deque<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    q = deque([root])</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        size = len(q)</span><br><span class="line">        <span class="keyword">while</span> size &gt; <span class="number">0</span>:</span><br><span class="line">            node = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> size &gt; <span class="number">1</span>: <span class="comment">## not the right most:</span></span><br><span class="line">                node.next = q[<span class="number">0</span>]</span><br><span class="line">            size -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                q.append(node.left)</span><br><span class="line">                q.append(node.right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></p><p>Or BFS with improvement, get rid of the deque, use the next pointer.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    cur  = root</span><br><span class="line">    next = root.left</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> next :</span><br><span class="line">        cur.left.next = cur.right</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># not the right-most node</span></span><br><span class="line">        <span class="keyword">if</span> cur.next:</span><br><span class="line">            cur.right.next = cur.next.left</span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># go to the next level</span></span><br><span class="line">            <span class="comment"># start from the left most element</span></span><br><span class="line">            cur = next</span><br><span class="line">            next = cur.left</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></p><h2 id="114-Flatten-Binary-Tree-to-Linked-List"><a href="#114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="114. Flatten Binary Tree to Linked List"></a>114. Flatten Binary Tree to Linked List</h2><h3 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS"></a>DFS</h3><p>post-order, flatten left, then flatten right, move left child to right and append the original right child to the end of new right child<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.flatten(root.left)</span><br><span class="line">    self.flatten(root.right)</span><br><span class="line">    </span><br><span class="line">    right = root.right</span><br><span class="line">    left = root.left</span><br><span class="line">    </span><br><span class="line">    root.left = <span class="literal">None</span></span><br><span class="line">    root.right = left</span><br><span class="line">    </span><br><span class="line">    p = root</span><br><span class="line">    <span class="keyword">while</span> p.right:</span><br><span class="line">        p = p.right</span><br><span class="line">    p.right = right</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure></p><h3 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> root:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left:</span><br><span class="line">            root = root.right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># find rightest element</span></span><br><span class="line">            p = root.left</span><br><span class="line">            <span class="keyword">while</span> p.right:</span><br><span class="line">                p = p.right</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># move right child to left.right</span></span><br><span class="line">            p.right = root.right</span><br><span class="line">            <span class="comment"># move left child to right</span></span><br><span class="line">            root.right = root.left</span><br><span class="line">            root.left = <span class="literal">None</span></span><br><span class="line">            root = root.right</span><br></pre></td></tr></table></figure><h2 id="654-Maximum-Binary-Tree"><a href="#654-Maximum-Binary-Tree" class="headerlink" title="654. Maximum Binary Tree"></a>654. Maximum Binary Tree</h2><p>Classic recursion<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMaximumBinaryTree</span>(<span class="params">self, nums: List[int]</span>) -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    val = max(nums)</span><br><span class="line">    i = nums.index(val)</span><br><span class="line">    root = TreeNode(val)</span><br><span class="line">    root.left = self.constructMaximumBinaryTree(nums[:i])</span><br><span class="line">    root.right = self.constructMaximumBinaryTree(nums[i + <span class="number">1</span>: ])</span><br><span class="line">    <span class="keyword">return</span> root  </span><br></pre></td></tr></table></figure></p><h2 id="106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="106. Construct Binary Tree from Inorder and Postorder Traversal"></a>106. Construct Binary Tree from Inorder and Postorder Traversal</h2><p>Pretty straightforward solution, but not the best!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span>(<span class="params">self, inorder: List[int], postorder: List[int]</span>) -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inorder <span class="keyword">or</span> <span class="keyword">not</span> postorder:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    val = postorder[<span class="number">-1</span>]</span><br><span class="line">    root = TreeNode(val)</span><br><span class="line">    </span><br><span class="line">    i = inorder.index(val)</span><br><span class="line">    in_left = inorder[:i]</span><br><span class="line">    in_right = inorder[i + <span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line">    post_left = postorder[:len(in_left)]</span><br><span class="line">    post_right = postorder[len(in_left): <span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    root.left = self.buildTree(in_left, post_left)</span><br><span class="line">    root.right = self.buildTree(in_right, post_right)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><br>Finding index is O(n). Slicing array is O(k), k = slicing size. And extra space. Overall time and extra space is O(n^2)<br>So, to avoid finding index and slicing, use hash map<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span>(<span class="params">self, inorder: List[int], postorder: List[int]</span>) -&gt; TreeNode:</span></span><br><span class="line">        </span><br><span class="line">    dic = &#123;v: i <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(inorder)&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">lo, hi</span>):</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt; hi:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        node = TreeNode(postorder.pop())</span><br><span class="line">        i = dic[node.val]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># poping from post order, so should construct right child first</span></span><br><span class="line">        node.right = build(i + <span class="number">1</span>, hi)</span><br><span class="line">        node.left = build(lo, i - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> build(<span class="number">0</span>, len(inorder) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Tree problem collection (3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;99.Recover Binary Search Tree&lt;/li&gt;
&lt;li&gt;94.Binary Tree Inorder Traversal&lt;/li&gt;
&lt;li&gt;116.Populating Next Right Pointers in Each Node&lt;/li&gt;
&lt;li&gt;114.Flatten Binary Tree to Linked List&lt;/li&gt;
&lt;li&gt;654.Maximum Binary Tree&lt;/li&gt;
&lt;li&gt;106.Construct Binary Tree from Inorder and Postorder Traversal&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="Tree" scheme="http://testsiling.github.io/tags/Tree/"/>
    
    <category term="Data Structure" scheme="http://testsiling.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure Cheat Sheet</title>
    <link href="http://testsiling.github.io/2020/12/26/data-strcture-cheatsheet/"/>
    <id>http://testsiling.github.io/2020/12/26/data-strcture-cheatsheet/</id>
    <published>2020-12-26T19:40:42.000Z</published>
    <updated>2020-12-26T19:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Basically, there’re two ways to store data strctures: <strong>array</strong> and <strong>linked list</strong>.<br>All other data strctures, such as queue, stack, graph, hashmap, tree, heap, etc, all can be implemented by array and linked list.</p><a id="more"></a><p>In python, <strong>list = array</strong> is implemented by dynamic array, when it used up the original assigned space, it will point to new sapce.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    Py_ssize_t ob_size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */</span></span><br><span class="line">    PyObject **ob_item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ob_item contains space for &#x27;allocated&#x27; elements.  The number</span></span><br><span class="line"><span class="comment">     * currently in use is ob_size.</span></span><br><span class="line"><span class="comment">     * Invariants:</span></span><br><span class="line"><span class="comment">     *     0 &lt;= ob_size &lt;= allocated</span></span><br><span class="line"><span class="comment">     *     len(list) == ob_size</span></span><br><span class="line"><span class="comment">     *     ob_item == NULL implies ob_size == allocated == 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Py_ssize_t allocated;</span><br><span class="line">&#125; PyListObject;</span><br></pre></td></tr></table></figure><p>The array itself stores a list of of pointers. Therefore, while using list, need to cautious to some traps like: during initialization, all pointers are pointing to the same list<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls = [[]] * <span class="number">5</span></span><br><span class="line">ls[<span class="number">0</span>].append(<span class="number">1</span>)</span><br><span class="line">print(ls)  <span class="comment">#[[1], [1], [1], [1], [1]]</span></span><br></pre></td></tr></table></figure><br>Also, time for popping the last element is O(1), but popping intermediate is O(n). </p><h2 id="Tranverseal"><a href="#Tranverseal" class="headerlink" title="Tranverseal"></a>Tranverseal</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, next=None</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="comment"># iterative</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranverse</span>(<span class="params">head</span>):</span></span><br><span class="line">    <span class="keyword">while</span> p:</span><br><span class="line">        <span class="comment"># do something</span></span><br><span class="line">        p = p.next</span><br><span class="line"></span><br><span class="line"><span class="comment"># recursive</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranverse</span>(<span class="params">head</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line">    tranverse(head.next)</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=None, right=None</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tranverse</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># pre-order</span></span><br><span class="line">    tranverse(root.left)</span><br><span class="line">    <span class="comment"># in-order</span></span><br><span class="line">    tranverse(root.right)</span><br><span class="line">    <span class="comment"># post-order</span></span><br></pre></td></tr></table></figure><h3 id="Practice"><a href="#Practice" class="headerlink" title="Practice:"></a>Practice:</h3><ul><li>124.Binary Tree Maximum Path Sum</li><li>105.Construct Binary Tree from Preorder and Inorder Traversal</li><li>94.Binary Tree Inorder Traversal</li><li>106.Construct Binary Tree from Inorder and Postorder Traversal</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Basically, there’re two ways to store data strctures: &lt;strong&gt;array&lt;/strong&gt; and &lt;strong&gt;linked list&lt;/strong&gt;.&lt;br&gt;All other data strctures, such as queue, stack, graph, hashmap, tree, heap, etc, all can be implemented by array and linked list.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Data Structure" scheme="http://testsiling.github.io/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Depth-first Search (1)</title>
    <link href="http://testsiling.github.io/2020/12/20/al-dfs-1/"/>
    <id>http://testsiling.github.io/2020/12/20/al-dfs-1/</id>
    <published>2020-12-21T04:10:16.000Z</published>
    <updated>2020-12-21T04:10:16.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>17.Letter Combinations of a Phone Number</li><li>695.Max Area of Island</li><li>124.Binary Tree Maximum Path Sum *</li><li>938.Range Sum of BST</li></ul><a id="more"></a><h2 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a>17. Letter Combinations of a Phone Number</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: str, path = <span class="string">&#x27;&#x27;</span>, res = []</span>) -&gt; List[str]:</span></span><br><span class="line">    nums = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: [<span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: [<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>], </span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: [<span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">digits, path = <span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">if</span> path:</span><br><span class="line">                res.append(path)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        d = digits[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> nums[d]:</span><br><span class="line">            helper(digits[<span class="number">1</span>:], path + c)</span><br><span class="line">    </span><br><span class="line">    helper(digits)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="695-Max-Area-of-Island"><a href="#695-Max-Area-of-Island" class="headerlink" title="695. Max Area of Island"></a>695. Max Area of Island</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxAreaOfIsland</span>(<span class="params">self, grid: List[List[int]]</span>) -&gt; int:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    visited = [[<span class="literal">False</span>] * len(grid[<span class="number">0</span>]) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(grid))]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">row, col</span>):</span></span><br><span class="line">        <span class="keyword">if</span> row &gt;= len(grid) <span class="keyword">or</span> col &gt;= len(grid[<span class="number">0</span>]) <span class="keyword">or</span> row &lt; <span class="number">0</span> <span class="keyword">or</span> col &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> visited[row][col] <span class="keyword">or</span> <span class="keyword">not</span> grid[row][col]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        visited[row][col] = <span class="number">1</span></span><br><span class="line">        area = <span class="number">1</span></span><br><span class="line">        area += helper(row - <span class="number">1</span>, col) + helper(row + <span class="number">1</span>, col)</span><br><span class="line">        area += helper(row, col - <span class="number">1</span>) + helper(row, col + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">            res = max(res, helper(r, c))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a>124. Binary Tree Maximum Path Sum</h2><p>Hard! here’s the standard solution. Need to review again later.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_gain</span>(<span class="params">node</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> max_sum</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        left = max(max_gain(node.left), <span class="number">0</span>)</span><br><span class="line">        right = max(max_gain(node.right), <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        cur_sum = node.val + left + right</span><br><span class="line">        max_sum = max(max_sum, cur_sum)</span><br><span class="line">        <span class="keyword">return</span> node.val + max(left, right)</span><br><span class="line">    </span><br><span class="line">    max_sum = float(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">    max_gain(root)</span><br><span class="line">    <span class="keyword">return</span> max_sum</span><br></pre></td></tr></table></figure></p><h2 id="938-Range-Sum-of-BST"><a href="#938-Range-Sum-of-BST" class="headerlink" title="938. Range Sum of BST"></a>938. Range Sum of BST</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangeSumBST</span>(<span class="params">self, root: TreeNode, low: int, high: int</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> low &lt;= root.val &lt;= high:</span><br><span class="line">        res += root.val</span><br><span class="line">    <span class="keyword">if</span> low &lt; root.val:</span><br><span class="line">        res += self.rangeSumBST(root.left, low, high)</span><br><span class="line">    <span class="keyword">if</span> root.val &lt; high:</span><br><span class="line">        res += self.rangeSumBST(root.right, low, high)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;17.Letter Combinations of a Phone Number&lt;/li&gt;
&lt;li&gt;695.Max Area of Island&lt;/li&gt;
&lt;li&gt;124.Binary Tree Maximum Path Sum *&lt;/li&gt;
&lt;li&gt;938.Range Sum of BST&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="DFS" scheme="http://testsiling.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Stack (1)</title>
    <link href="http://testsiling.github.io/2020/12/16/al-stack-1/"/>
    <id>http://testsiling.github.io/2020/12/16/al-stack-1/</id>
    <published>2020-12-17T03:06:09.000Z</published>
    <updated>2020-12-17T03:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Stack Problem Collection (1)</p><ul><li>20.Valid Parentheses</li><li>1249.Minimum Remove to Make Valid Parentheses</li><li>394.Decode String</li><li>1209.Remove All Adjacent Duplicates in String II</li><li>739.Daily Temperatures</li><li><ol><li>Simplify Path</li></ol></li></ul><a id="more"></a><h2 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a>20. Valid Parentheses</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: str</span>) -&gt; bool:</span></span><br><span class="line">    right = &#123;</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="comment"># left bracket</span></span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> right:</span><br><span class="line">            stack.append(c)</span><br><span class="line">        <span class="comment"># right bracket</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> stack <span class="keyword">or</span> stack.pop() != right[c]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure><h2 id="1249-Minimum-Remove-to-Make-Valid-Parentheses"><a href="#1249-Minimum-Remove-to-Make-Valid-Parentheses" class="headerlink" title="1249. Minimum Remove to Make Valid Parentheses"></a>1249. Minimum Remove to Make Valid Parentheses</h2><ul><li>for right bracket, must match to an existed left bracket, or remove it.</li><li>for left bracket, log its index<br>After scan the whole string, remove open left bracket<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minRemoveToMakeValid</span>(<span class="params">self, s: str</span>) -&gt; str:</span></span><br><span class="line">    open_left = []</span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            res += c</span><br><span class="line">            open_left.append(len(res) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> open_left:</span><br><span class="line">                res += c</span><br><span class="line">                open_left.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += c</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(open_left):</span><br><span class="line">        res = res[:i] + res[i + <span class="number">1</span>: ]</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><h2 id="394-Decode-String"><a href="#394-Decode-String" class="headerlink" title="394. Decode String"></a>394. Decode String</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeString</span>(<span class="params">self, s: str</span>) -&gt; str:</span></span><br><span class="line">    stack = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">            repeat = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">while</span> stack:</span><br><span class="line">                x = stack.pop()</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># found substring</span></span><br><span class="line">                <span class="keyword">if</span> x == <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">                    <span class="comment"># find number</span></span><br><span class="line">                    num = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>].isdigit():</span><br><span class="line">                        num = stack.pop() + num</span><br><span class="line">                    num = int(num)</span><br><span class="line">                    repeat = repeat * int(num)</span><br><span class="line">                    stack.append(repeat)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                repeat = x + repeat</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(c)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack)</span><br></pre></td></tr></table></figure><h2 id="1209-Remove-All-Adjacent-Duplicates-in-String-II"><a href="#1209-Remove-All-Adjacent-Duplicates-in-String-II" class="headerlink" title="1209. Remove All Adjacent Duplicates in String II"></a>1209. Remove All Adjacent Duplicates in String II</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, s: str, k: int</span>) -&gt; str:</span></span><br><span class="line">    stack = []  <span class="comment"># (element, cnt)</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">and</span> c == stack[<span class="number">-1</span>][<span class="number">0</span>]:</span><br><span class="line">            cnt = stack[<span class="number">-1</span>][<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            stack.append((c, cnt))</span><br><span class="line">            <span class="keyword">if</span> cnt == k:</span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">                    stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((c, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> stack])</span><br></pre></td></tr></table></figure><h2 id="739-Daily-Temperatures"><a href="#739-Daily-Temperatures" class="headerlink" title="739. Daily Temperatures"></a>739. Daily Temperatures</h2><p>use index to calculate days<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span>(<span class="params">self, T: List[int]</span>) -&gt; List[int]:</span></span><br><span class="line">    stack = []  <span class="comment"># temp, index</span></span><br><span class="line">    warmer = [<span class="number">0</span>] * len(T)</span><br><span class="line">    <span class="keyword">for</span> i, temp <span class="keyword">in</span> enumerate(T):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> temp &gt; stack[<span class="number">-1</span>][<span class="number">0</span>]:</span><br><span class="line">            pre_temp, j = stack.pop()</span><br><span class="line">            warmer[j] = i - j</span><br><span class="line">        stack.append((temp, i))</span><br><span class="line">    <span class="keyword">return</span> warmer</span><br></pre></td></tr></table></figure></p><h2 id="71-Simplify-Path"><a href="#71-Simplify-Path" class="headerlink" title="71. Simplify Path"></a>71. Simplify Path</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplifyPath</span>(<span class="params">self, path: str</span>) -&gt; str:</span></span><br><span class="line">    stack = []</span><br><span class="line">    paths = path.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> paths:</span><br><span class="line">        <span class="keyword">if</span> p == <span class="string">&#x27;..&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> p == <span class="string">&#x27;.&#x27;</span> <span class="keyword">or</span> p == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append(p)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;/&#x27;</span>.join(stack)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Stack Problem Collection (1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20.Valid Parentheses&lt;/li&gt;
&lt;li&gt;1249.Minimum Remove to Make Valid Parentheses&lt;/li&gt;
&lt;li&gt;394.Decode String&lt;/li&gt;
&lt;li&gt;1209.Remove All Adjacent Duplicates in String II&lt;/li&gt;
&lt;li&gt;739.Daily Temperatures&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;Simplify Path&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="Stack" scheme="http://testsiling.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Dynamic Programming (1)</title>
    <link href="http://testsiling.github.io/2020/12/14/al-dp-1/"/>
    <id>http://testsiling.github.io/2020/12/14/al-dp-1/</id>
    <published>2020-12-15T01:30:55.000Z</published>
    <updated>2020-12-15T01:30:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Dynamic Programming Problem Collection (1)</p><p>I really not good at DP problem…<br>The key of Dynamic Programming is to get local result, then get global result. </p><ul><li>70.Climbing Stairs</li><li>121.Best Time to Buy and Sell Stock *</li><li>53.Maximum Subarray</li><li>198.House Robber</li><li>91.Decode Ways</li><li>746.Min Cost Climbing Stairs</li><li>42.Trapping Rain Water</li></ul><a id="more"></a><h2 id="70-Climbing-Stairs"><a href="#70-Climbing-Stairs" class="headerlink" title="70. Climbing Stairs"></a>70. Climbing Stairs</h2><script type="math/tex; mode=display">step_i = step_{i-1} + step_{i-2}</script><p>Tried to use recursion but it was super slow. Use iteration is much faster.</p><p>calculate the previous step 1 and step 2, keep tracking it. Time = O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span>(<span class="params">self, n: int</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    p1, p2 = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">        cur = p1 + p2</span><br><span class="line">        p1, p2 = p2, cur</span><br><span class="line">    <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><h2 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a>121. Best Time to Buy and Sell Stock</h2><p>I like this one. logging the lowest buying price while updating max profit<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: List[int]</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(prices) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    lowest = prices[<span class="number">0</span>]</span><br><span class="line">    profit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">        lowest = min(lowest, price)</span><br><span class="line">        profit = max(profit, price - lowest)</span><br><span class="line">    <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure></p><h2 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h2><h3 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h3><p>find local max sum, update global max sum if greater.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span>(<span class="params">self, nums: List[int]</span>) -&gt; int:</span></span><br><span class="line">    max_sum = nums[<span class="number">0</span>]</span><br><span class="line">    cur_sum = nums[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">        cur_sum = max(cur_sum + num, num)</span><br><span class="line">        max_sum = max(cur_sum, max_sum)</span><br><span class="line">    <span class="keyword">return</span> max_sum</span><br></pre></td></tr></table></figure></p><h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span>(<span class="params">self, nums: List[int]</span>) -&gt; int:</span></span><br><span class="line">    dp = [<span class="number">0</span>] * len(nums)</span><br><span class="line">    <span class="keyword">for</span> i, num <span class="keyword">in</span> enumerate(nums)</span><br><span class="line">        dp[i] = max(dp[i - <span class="number">1</span>] + num, num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure><h2 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a>198. House Robber</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span>(<span class="params">self, nums: List[int]</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> max(nums, default=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    gain = [<span class="number">0</span>] * len(nums)</span><br><span class="line">    gain[<span class="number">0</span>], gain[<span class="number">1</span>] = nums[<span class="number">0</span>], max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(nums)):</span><br><span class="line">        <span class="comment"># Two options:</span></span><br><span class="line">        <span class="comment"># 1) rob it, gain(i) = gain(i-2) + current money</span></span><br><span class="line">        <span class="comment"># 2) don&#x27;t rob it, current max gain is gain(i - 1)</span></span><br><span class="line">        gain[i] = max(gain[i - <span class="number">2</span>] + nums[i], gain[i - <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gain[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="91-Decode-Way"><a href="#91-Decode-Way" class="headerlink" title="91. Decode Way"></a>91. Decode Way</h2><p>The second base case is so…. fu k.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numDecodings</span>(<span class="params">self, s: str</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> len(s) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    dp = [<span class="number">0</span>] * len(s)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">1</span>] += s[<span class="number">1</span>] != <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    dp[<span class="number">1</span>] += <span class="number">10</span> &lt;= int(s[:<span class="number">2</span>]) &lt;= <span class="number">26</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(s)):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># single digit</span></span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            dp[i] += dp[i - <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># double digits</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">10</span> &lt;= int(s[i - <span class="number">1</span> : i + <span class="number">1</span>]) &lt;= <span class="number">26</span>:</span><br><span class="line">            dp[i] += dp[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746. Min Cost Climbing Stairs"></a>746. Min Cost Climbing Stairs</h2><p>Either pay the last step, or pay the second last step<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minCostClimbingStairs</span>(<span class="params">self, cost: List[int]</span>) -&gt; int:</span></span><br><span class="line">    s0, s1 = cost[<span class="number">0</span>], cost[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(cost)):</span><br><span class="line">        s1, s0 = min(cost[i] + s0, cost[i] + s1), s1</span><br><span class="line">    <span class="keyword">return</span> min(s0, s1)</span><br></pre></td></tr></table></figure></p><h2 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a>42. Trapping Rain Water</h2><p>DP solution, log left max, then log right max<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trap</span>(<span class="params">self, height: List[int]</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> len(height) &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># left, right, rain</span></span><br><span class="line">    dp = [[<span class="number">0</span>, <span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(height))]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># find left max:</span></span><br><span class="line">    <span class="keyword">for</span> i, h <span class="keyword">in</span> enumerate(height):</span><br><span class="line">        dp[i][<span class="number">0</span>] = left_max</span><br><span class="line">        left_max = max(h, left_max)</span><br><span class="line">    </span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="comment"># find right max, calculate rain</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        dp[i][<span class="number">1</span>] = right_max</span><br><span class="line">        right_max = max(right_max, height[i])</span><br><span class="line">        res += max(min(dp[i][<span class="number">0</span>], dp[i][<span class="number">1</span>]) - height[i], <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br>It also has a stack solution.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Dynamic Programming Problem Collection (1)&lt;/p&gt;
&lt;p&gt;I really not good at DP problem…&lt;br&gt;The key of Dynamic Programming is to get local result, then get global result. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;70.Climbing Stairs&lt;/li&gt;
&lt;li&gt;121.Best Time to Buy and Sell Stock *&lt;/li&gt;
&lt;li&gt;53.Maximum Subarray&lt;/li&gt;
&lt;li&gt;198.House Robber&lt;/li&gt;
&lt;li&gt;91.Decode Ways&lt;/li&gt;
&lt;li&gt;746.Min Cost Climbing Stairs&lt;/li&gt;
&lt;li&gt;42.Trapping Rain Water&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="Greedy" scheme="http://testsiling.github.io/tags/Greedy/"/>
    
    <category term="Dynamic Programming" scheme="http://testsiling.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Sorting (1)</title>
    <link href="http://testsiling.github.io/2020/12/10/al-sort-search-1/"/>
    <id>http://testsiling.github.io/2020/12/10/al-sort-search-1/</id>
    <published>2020-12-10T19:00:29.000Z</published>
    <updated>2020-12-10T19:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Sorting Problem Collection (1)</p><ul><li>56.Merge Intervals</li><li>253.Meeting Rooms II</li><li>973.K Closest Points to Origin</li><li>148.Sort List *</li><li>88.Merge Sorted Array</li></ul><a id="more"></a><h2 id="56-Merge-Intervals"><a href="#56-Merge-Intervals" class="headerlink" title="56. Merge Intervals"></a>56. Merge Intervals</h2><p>Sort first, then merge. Pretty straight forward.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, intervals: List[List[int]]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    intervals.sort()</span><br><span class="line">    begin, end = intervals[<span class="number">0</span>]</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> cur_begin, cur_end <span class="keyword">in</span> intervals[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> cur_begin &lt;= end:</span><br><span class="line">            end = max(end, cur_end)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append([begin, end])</span><br><span class="line">            begin, end = cur_begin, cur_end</span><br><span class="line">    res.append([begin, end])</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><h2 id="253-Meeting-Rooms-II"><a href="#253-Meeting-Rooms-II" class="headerlink" title="253. Meeting Rooms II"></a>253. Meeting Rooms II</h2><p>I use hashmap to log current using rooms. <code>free</code> variable is for reducing times of <code>sum(rooms.values())</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minMeetingRooms</span>(<span class="params">self, intervals: List[List[int]]</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">    intervals.sort()</span><br><span class="line">    rooms = defaultdict(int)</span><br><span class="line">    cnt, free = <span class="number">0</span>, <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> start, end <span class="keyword">in</span> intervals:</span><br><span class="line">        <span class="keyword">for</span> time <span class="keyword">in</span> list(rooms.keys()):</span><br><span class="line">            <span class="keyword">if</span> start &gt;= time[<span class="number">-1</span>]:</span><br><span class="line">                free += rooms[time]</span><br><span class="line">                <span class="keyword">del</span> rooms[time] </span><br><span class="line">        rooms[(start, end)] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> free &gt; <span class="number">0</span>:</span><br><span class="line">            free -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure></p><h2 id="973-K-Closest-Points-to-Origin"><a href="#973-K-Closest-Points-to-Origin" class="headerlink" title="973. K Closest Points to Origin"></a>973. K Closest Points to Origin</h2><p>I feels like it is a hack… pretty straight forward though.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kClosest</span>(<span class="params">self, points: List[List[int]], K: int</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    points.sort(key = <span class="keyword">lambda</span> p: p[<span class="number">0</span>]**<span class="number">2</span> + p[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> points[:K]</span><br></pre></td></tr></table></figure></p><h2 id="148-Sort-List"><a href="#148-Sort-List" class="headerlink" title="148. Sort List"></a>148. Sort List</h2><p>A nice one, bascially is a merge sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">l1, l2</span>):</span></span><br><span class="line">      dummy = ListNode()</span><br><span class="line">      cur = dummy</span><br><span class="line">      <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">          cur.next = l1</span><br><span class="line">          l1 = l1.next</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">            cur.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            cur = cur.next</span><br><span class="line">            cur.next = l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">            <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">          </span><br><span class="line">          <span class="comment"># use 2 pointers to divide into 2 lsits</span></span><br><span class="line">          <span class="comment"># slow is list 2</span></span><br><span class="line">          p, slow, fast = <span class="literal">None</span>, head, head</span><br><span class="line">          <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            p = slow</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            p.next = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> merge(self.sortList(head), self.sortList(slow))</span><br></pre></td></tr></table></figure><h2 id="88-Merge-Sorted-Array"><a href="#88-Merge-Sorted-Array" class="headerlink" title="88. Merge Sorted Array"></a>88. Merge Sorted Array</h2><p>I don’t think it is an Easy at all.<br>My initial solution: maintain 2 pointers, current index of nums1, and nums2. If n1 &gt; n2, need ro insert n2 before n1. which means swap all the following digit from n1 till the end of num1.<br>This solution is pretty slow. Time complexity is O(m^n)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums1: List[int], m: int, nums2: List[int], n: int</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    i1, i2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i2 &lt; n <span class="keyword">and</span> i1 &lt; m:</span><br><span class="line">        <span class="keyword">if</span> nums1[i1 + i2] &gt; nums2[i2]:</span><br><span class="line">            pre = nums2[i2]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(i1 + i2, m + i2 + <span class="number">1</span>):</span><br><span class="line">                temp = nums1[i]</span><br><span class="line">                nums1[i] = pre</span><br><span class="line">                pre = temp</span><br><span class="line">            i2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i2 &lt; n:</span><br><span class="line">        nums1[i1 + i2: ] = nums2[i2:]</span><br></pre></td></tr></table></figure></p><p>Assign descending can avoid swapping.<br>time: O(n+m)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">self, nums1: List[int], m: int, nums2: List[int], n: int</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    i1 = m - <span class="number">1</span></span><br><span class="line">    i2 = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m + n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> i1 &lt; <span class="number">0</span>: </span><br><span class="line">            nums1[i] = nums2[i2]</span><br><span class="line">            i2 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i2 &lt; <span class="number">0</span>:</span><br><span class="line">            nums1[i] = nums1[i1]</span><br><span class="line">            i1 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums2[i2] &gt; nums1[i1]:</span><br><span class="line">            nums1[i] = nums2[i2]</span><br><span class="line">            i2 -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums1[i] = nums1[i1]</span><br><span class="line">            i1 -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Sorting Problem Collection (1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;56.Merge Intervals&lt;/li&gt;
&lt;li&gt;253.Meeting Rooms II&lt;/li&gt;
&lt;li&gt;973.K Closest Points to Origin&lt;/li&gt;
&lt;li&gt;148.Sort List *&lt;/li&gt;
&lt;li&gt;88.Merge Sorted Array&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="Sorting" scheme="http://testsiling.github.io/tags/Sorting/"/>
    
    <category term="Searching" scheme="http://testsiling.github.io/tags/Searching/"/>
    
  </entry>
  
  <entry>
    <title>Classical Sorting Algorithms</title>
    <link href="http://testsiling.github.io/2020/12/09/al-sort-classical/"/>
    <id>http://testsiling.github.io/2020/12/09/al-sort-classical/</id>
    <published>2020-12-10T04:02:28.000Z</published>
    <updated>2020-12-10T04:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>Name</th><th>Time Complexity</th><th>Sapce Complexity</th></tr></thead><tbody><tr><td>Bubble Sort</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>Selection Sort</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>Insertion Sort</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>Merge Sort</td><td>O(n log(n))</td><td>O(n)</td></tr><tr><td>Quick Sort</td><td>O(n^2)</td><td>O(log(n))</td></tr><tr><td>Heap Sort</td><td>O(n log(n))</td><td>O(1)</td></tr><tr><td>Counting Sort</td><td>O(n+k)</td><td>O(k)</td></tr><tr><td>Radix Sort</td><td>O(nk)</td><td>O(n+k)</td></tr></tbody></table></div><a id="more"></a><h2 id="Bubble-Sort"><a href="#Bubble-Sort" class="headerlink" title="Bubble Sort"></a>Bubble Sort</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">ls</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ls) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(ls) - <span class="number">1</span>  - i):</span><br><span class="line">            <span class="keyword">if</span> ls[j] &gt; ls[j + <span class="number">1</span>]:</span><br><span class="line">                ls[j], ls[j+<span class="number">1</span>] = ls[j+<span class="number">1</span>], ls[j]</span><br><span class="line">    <span class="keyword">return</span> ls</span><br></pre></td></tr></table></figure><h2 id="Selection-Sort"><a href="#Selection-Sort" class="headerlink" title="Selection Sort"></a>Selection Sort</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSort</span>(<span class="params">ls</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ls)):</span><br><span class="line">        mini = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(ls)):</span><br><span class="line">            <span class="keyword">if</span> ls[j] &lt; ls[mini]:</span><br><span class="line">                mini = j</span><br><span class="line">            ls[mini], ls[i] = ls[i], ls[mini]</span><br><span class="line">    <span class="keyword">return</span> ls</span><br></pre></td></tr></table></figure><h2 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertSort</span>(<span class="params">ls</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ls)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> ls[j] &gt;= ls[j - <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            ls[j], ls[j - <span class="number">1</span>] = ls[j - <span class="number">1</span>], ls[j]</span><br><span class="line">    <span class="keyword">return</span> ls</span><br></pre></td></tr></table></figure><h2 id="Merge-Sort"><a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a>Merge Sort</h2><p>An <code>divide and conquer</code> approch.</p><ol><li>If the list is of length 0 or 1, then it is already sorted. Otherwise:</li><li>Divide the unsorted list into two sublists of about half the size.</li><li>Sort each sublist recursively by re-applying merge sort.</li><li>Merge the two sublists back into one sorted list.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">arr1, arr2</span>):</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> arr1 <span class="keyword">and</span> arr2:</span><br><span class="line">        <span class="keyword">if</span> arr1[<span class="number">0</span>] &lt;= arr2[<span class="number">0</span>]:</span><br><span class="line">            res.append(arr1.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(arr2.pop(<span class="number">0</span>))</span><br><span class="line">        res += arr1 <span class="keyword">if</span> arr1 <span class="keyword">else</span> arr2</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    left = arr[:len(arr) // <span class="number">2</span>]</span><br><span class="line">    right = arr[len(arr) // <span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br></pre></td></tr></table></figure><h2 id="Quick-Sort"><a href="#Quick-Sort" class="headerlink" title="Quick Sort"></a>Quick Sort</h2><p>An divide and conquer strategy. Select a <code>pivot</code>. elements less than pivot, move to the left side, else move to the right side.<br><em>set the first element as pivot</em><br>Sort in place:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>):</span></span><br><span class="line">    pivot = arr[right]</span><br><span class="line">    i = left - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(left, right):</span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt;= pivot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">    arr[i + <span class="number">1</span>], arr[right] = arr[right], arr[i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        q = partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, q - <span class="number">1</span>)</span><br><span class="line">        quickSort(arr, q + <span class="number">1</span>, right)</span><br></pre></td></tr></table></figure></p><h2 id="Heap-Sort"><a href="#Heap-Sort" class="headerlink" title="Heap Sort"></a>Heap Sort</h2><p><a href="https://github.com/python/cpython/blob/3.9/Lib/heapq.py">Heapq Module</a><br><a href="https://en.wikipedia.org/wiki/Heapsort">About Heap Sort</a></p><ol><li>Build a max heap</li><li>replace the root (current largest number) with the last item and reduce the heap size by 1. At this time, the largerst number is sorted and excluded from the heap. </li><li>repeat step 2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapify</span>(<span class="params">arr, n, i</span>):</span></span><br><span class="line">    largest = i  <span class="comment"># Initialize largest as root</span></span><br><span class="line">    l = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    r = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># check if any child is greater than root</span></span><br><span class="line">    <span class="keyword">if</span> l &lt; n <span class="keyword">and</span> arr[largest] &lt; arr[l]:</span><br><span class="line">        largest = l</span><br><span class="line">    <span class="keyword">if</span> r &lt; n <span class="keyword">and</span> arr[largest] &lt; arr[r]:</span><br><span class="line">        largest = r</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># if child greater than node, bubble it up.</span></span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        arr[i], arr[largest] = arr[largest], arr[i]  <span class="comment"># swap</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># Heapify the root.</span></span><br><span class="line">        heapify(arr, n, largest)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    n = len(arr)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Build a maxheap.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(n // <span class="number">2</span>)):</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># get sorted items one by one</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(<span class="number">1</span>, n)):</span><br><span class="line">        arr[i], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[i]  <span class="comment"># swap</span></span><br><span class="line">        heapify(arr, i, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="Counting-Sort"><a href="#Counting-Sort" class="headerlink" title="Counting Sort"></a>Counting Sort</h2>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Time Complexity&lt;/th&gt;
&lt;th&gt;Sapce Complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bubble Sort&lt;/td&gt;
&lt;td&gt;O(n^2)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selection Sort&lt;/td&gt;
&lt;td&gt;O(n^2)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertion Sort&lt;/td&gt;
&lt;td&gt;O(n^2)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Merge Sort&lt;/td&gt;
&lt;td&gt;O(n log(n))&lt;/td&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quick Sort&lt;/td&gt;
&lt;td&gt;O(n^2)&lt;/td&gt;
&lt;td&gt;O(log(n))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heap Sort&lt;/td&gt;
&lt;td&gt;O(n log(n))&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Counting Sort&lt;/td&gt;
&lt;td&gt;O(n+k)&lt;/td&gt;
&lt;td&gt;O(k)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Radix Sort&lt;/td&gt;
&lt;td&gt;O(nk)&lt;/td&gt;
&lt;td&gt;O(n+k)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Sorting" scheme="http://testsiling.github.io/tags/Sorting/"/>
    
    <category term="Heap" scheme="http://testsiling.github.io/tags/Heap/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Tree (2)</title>
    <link href="http://testsiling.github.io/2020/12/06/al-tree-2/"/>
    <id>http://testsiling.github.io/2020/12/06/al-tree-2/</id>
    <published>2020-12-07T04:28:42.000Z</published>
    <updated>2020-12-07T04:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Tree problem collection (2)</p><ul><li>199.Binary Tree Right Side View</li><li>105.Construct Binary Tree from Preorder and Inorder Traversal</li><li>236.Lowest Common Ancestor of a Binary Tree</li><li>987.Vertical Order Traversal of a Binary Tree</li><li>103.Binary Tree Zigzag Level Order Traversal</li></ul><a id="more"></a><p>Basic About Tree:<br>Preorder: root - left - right<br>Inorder: left - root - right<br>Postorder: left - right - root</p><h2 id="199-Binary-Tree-Right-Side-View"><a href="#199-Binary-Tree-Right-Side-View" class="headerlink" title="199. Binary Tree Right Side View"></a>199. Binary Tree Right Side View</h2><p>dfs, root -&gt; right -&gt; left<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">node, level = <span class="number">1</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> level <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            res[level] = node.val</span><br><span class="line">        dfs(node.right, level + <span class="number">1</span>)</span><br><span class="line">        dfs(node.left, level + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    dfs(root)</span><br><span class="line">    <span class="keyword">return</span> list(res.values())</span><br></pre></td></tr></table></figure></p><h2 id="105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="105. Construct Binary Tree from Preorder and Inorder Traversal"></a>105. Construct Binary Tree from Preorder and Inorder Traversal</h2><p>get root from 1st level of preorder<br>get child inorder by deviding inorder by root.val<br>get child preorder by number of child inorder</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildTree</span>(<span class="params">self, preorder: List[int], inorder: List[int]</span>) -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> preorder:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    root = TreeNode(preorder.pop(<span class="number">0</span>))</span><br><span class="line">    i = inorder.index(root.val)</span><br><span class="line">    </span><br><span class="line">    left_inorder = inorder[:i]</span><br><span class="line">    left_preorder = preorder[:len(left_inorder)]</span><br><span class="line">    </span><br><span class="line">    right_inorder = inorder[i + <span class="number">1</span>:]</span><br><span class="line">    right_preorder = preorder[len(left_inorder): ]</span><br><span class="line">    </span><br><span class="line">    root.left = self.buildTree(left_preorder, left_inorder)</span><br><span class="line">    root.right = self.buildTree(right_preorder, right_inorder)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="236. Lowest Common Ancestor of a Binary Tree"></a>236. Lowest Common Ancestor of a Binary Tree</h2><p>My initial AC is backtracking but only beats 5%… I searched all ancestor of p and q and find their LCA, which is super low. Here’s a more concise DFS solution<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; &#x27;TreeNode&#x27;:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root == p <span class="keyword">or</span> root == q:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    left = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">    right = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">    <span class="keyword">if</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">        <span class="keyword">return</span> right</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure></p><h2 id="987-Vertical-Order-Traversal-of-a-Binary-Tree"><a href="#987-Vertical-Order-Traversal-of-a-Binary-Tree" class="headerlink" title="987. Vertical Order Traversal of a Binary Tree"></a>987. Vertical Order Traversal of a Binary Tree</h2><p>Use Hashmap to log node coordinate. If in the same y level, sort it.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verticalTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">    coordinates = defaultdict(<span class="keyword">lambda</span>: defaultdict(list))</span><br><span class="line">    res = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInorder</span>(<span class="params">node, x, y</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        coordinates[x][y].append(node.val)</span><br><span class="line">        searchInorder(node.left, x<span class="number">-1</span>, y<span class="number">-1</span>)</span><br><span class="line">        searchInorder(node.right, x+<span class="number">1</span>, y<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    searchInorder(root, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sorted(coordinates.keys()):</span><br><span class="line">        cur = []</span><br><span class="line">        levels = coordinates[x]</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> sorted(levels.keys(), reverse=<span class="literal">True</span>):</span><br><span class="line">            cur += sorted(levels[y])</span><br><span class="line">        res.append(cur)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p><h2 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h2><p>Classic BFS.<br>Odd level: left -&gt; right<br>Even level: right -&gt; left<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    q = [(root, <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node, level = q.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> len(res) &lt; level:</span><br><span class="line">            res.append([])</span><br><span class="line">        <span class="comment"># odd level: left -&gt; right</span></span><br><span class="line">        <span class="keyword">if</span> bool(level % <span class="number">2</span>):</span><br><span class="line">            res[level - <span class="number">1</span>].append(node.val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res[level - <span class="number">1</span>] = [node.val] + res[level - <span class="number">1</span>] </span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append((node.left, level + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append((node.right, level + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Tree problem collection (2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;199.Binary Tree Right Side View&lt;/li&gt;
&lt;li&gt;105.Construct Binary Tree from Preorder and Inorder Traversal&lt;/li&gt;
&lt;li&gt;236.Lowest Common Ancestor of a Binary Tree&lt;/li&gt;
&lt;li&gt;987.Vertical Order Traversal of a Binary Tree&lt;/li&gt;
&lt;li&gt;103.Binary Tree Zigzag Level Order Traversal&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="DFS" scheme="http://testsiling.github.io/tags/DFS/"/>
    
    <category term="Tree" scheme="http://testsiling.github.io/tags/Tree/"/>
    
    <category term="BFS" scheme="http://testsiling.github.io/tags/BFS/"/>
    
    <category term="Hash Table" scheme="http://testsiling.github.io/tags/Hash-Table/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Tree (1)</title>
    <link href="http://testsiling.github.io/2020/12/02/al-tree-1/"/>
    <id>http://testsiling.github.io/2020/12/02/al-tree-1/</id>
    <published>2020-12-03T01:15:03.000Z</published>
    <updated>2020-12-03T01:15:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode Tree problem collection (1)</p><ul><li>104.Maximum Depth of Binary Tree</li><li>98.Validate Binary Search Tree</li><li>101.Symmetric Tree</li><li>102.Binary Tree Level Order Traversal</li><li>108.Convert Sorted Array to Binary Search Tree</li></ul><p>Inorder (Left, Root, Right)<br>Preorder (Root, Left, Right)<br>Postorder (Left, Right, Root)<br><a id="more"></a></p><h2 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a>104. Maximum Depth of Binary Tree</h2><p>DFS:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root.left:</span><br><span class="line">        left = self.maxDepth(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right:</span><br><span class="line">        right = self.maxDepth(root.right)</span><br><span class="line">    <span class="keyword">return</span> max(left, right) + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>BFS:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    q = [(root, <span class="number">1</span>)]</span><br><span class="line">    depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        cur, d = q.pop()</span><br><span class="line">        depth = max(d, depth)</span><br><span class="line">        <span class="keyword">if</span> cur.left:</span><br><span class="line">            q.append((cur.left, d + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> cur.right:</span><br><span class="line">            q.append((cur.right, d + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure></p><h2 id="98-Validate-Binary-Search-Tree"><a href="#98-Validate-Binary-Search-Tree" class="headerlink" title="98. Validate Binary Search Tree"></a>98. Validate Binary Search Tree</h2><p>This one is interesting<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span>(<span class="params">self, root: TreeNode,  floor=float(<span class="params"><span class="string">&#x27;-inf&#x27;</span></span>), ceil = float(<span class="params"><span class="string">&#x27;inf&#x27;</span></span>)</span>) -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> floor &lt; root.val &lt; ceil:</span><br><span class="line">        <span class="keyword">return</span> self.isValidBST(root.left, floor, root.val) <span class="keyword">and</span> self.isValidBST(root.right, root.val, ceil)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h2 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a>101. Symmetric Tree</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span>(<span class="params">self, root: TreeNode</span>) -&gt; bool:</span></span><br><span class="line">    q = [root, root]</span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        right = q.pop()</span><br><span class="line">        left = q.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># empty sub tree</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (left <span class="keyword">and</span> <span class="keyword">not</span> right) <span class="keyword">or</span> (<span class="keyword">not</span> left <span class="keyword">and</span> right) <span class="keyword">or</span> (left.val != right.val):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># mirror check</span></span><br><span class="line">        q += [left.left, right.right, left.right, right.left]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    q = [root]</span><br><span class="line">    cur_nodes = <span class="number">1</span></span><br><span class="line">    child_nodes = <span class="number">0</span></span><br><span class="line">    res = []</span><br><span class="line">    cur = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        node = q.pop(<span class="number">0</span>)</span><br><span class="line">        cur_nodes  -= <span class="number">1</span></span><br><span class="line">        cur.append(node.val)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            q.append(node.left)</span><br><span class="line">            child_nodes += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            q.append(node.right)</span><br><span class="line">            child_nodes += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cur_nodes == <span class="number">0</span>:</span><br><span class="line">            res.append(cur)</span><br><span class="line">            cur = []</span><br><span class="line">            cur_nodes = child_nodes</span><br><span class="line">            child_nodes = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[List[int]]:</span></span><br><span class="line">    levels = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span> levels</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">node, level</span>):</span></span><br><span class="line">        <span class="keyword">if</span> len(levels) == level:</span><br><span class="line">            levels.append([])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># append the current node value</span></span><br><span class="line">        levels[level].append(node.val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># process child nodes for the next level</span></span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            dfs(node.left, level + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            dfs(node.right, level + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    dfs(root, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> levels</span><br></pre></td></tr></table></figure><h2 id="108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="108. Convert Sorted Array to Binary Search Tree"></a>108. Convert Sorted Array to Binary Search Tree</h2><p>Typical DFS<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span>(<span class="params">self, nums: List[int]</span>) -&gt; TreeNode:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    i = int(len(nums) / <span class="number">2</span>)</span><br><span class="line">    node = TreeNode(nums[i])</span><br><span class="line">    node.left = self.sortedArrayToBST(nums[: i])</span><br><span class="line">    node.right = self.sortedArrayToBST(nums[i + <span class="number">1</span>: ])</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode Tree problem collection (1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;104.Maximum Depth of Binary Tree&lt;/li&gt;
&lt;li&gt;98.Validate Binary Search Tree&lt;/li&gt;
&lt;li&gt;101.Symmetric Tree&lt;/li&gt;
&lt;li&gt;102.Binary Tree Level Order Traversal&lt;/li&gt;
&lt;li&gt;108.Convert Sorted Array to Binary Search Tree&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inorder (Left, Root, Right)&lt;br&gt;Preorder (Root, Left, Right)&lt;br&gt;Postorder (Left, Right, Root)&lt;br&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="DFS" scheme="http://testsiling.github.io/tags/DFS/"/>
    
    <category term="Tree" scheme="http://testsiling.github.io/tags/Tree/"/>
    
    <category term="Data Structure" scheme="http://testsiling.github.io/tags/Data-Structure/"/>
    
    <category term="BFS" scheme="http://testsiling.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Linked List (1)</title>
    <link href="http://testsiling.github.io/2020/12/01/al-linked-list-1/"/>
    <id>http://testsiling.github.io/2020/12/01/al-linked-list-1/</id>
    <published>2020-12-01T17:16:25.000Z</published>
    <updated>2020-12-01T17:16:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>Leetcode linked list problem collection (1)</p><ul><li>19.Remove Nth Node From End of List</li><li>206.Reverse Linked List</li><li>21.Merge Two Sorted Lists</li><li>234.Palindrome Linked List</li><li>141.Linked List Cycle</li><li>203.Remove Linked List Elements</li><li>83.Remove Duplicates from Sorted List</li><li>2.Add Two Numbers</li><li>876.Middle of the Linked List</li><li>369.Plus One Linked List</li></ul><a id="more"></a><h2 id="19-Remove-Nth-Node-From-End-of-List"><a href="#19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="19. Remove Nth Node From End of List"></a>19. Remove Nth Node From End of List</h2><p>Two pointers solution: right pointer is <code>n</code> step behind left pointer. When right pointer reache the end of the linked list, <code>left.next</code> is the node that should be removed.<br>Hint: Dummy node usually very useful in linked list algorithms.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span>(<span class="params">self, head: ListNode, n: int</span>) -&gt; ListNode:</span></span><br><span class="line">    dummy = ListNode(next=head)       </span><br><span class="line">    left = dummy</span><br><span class="line">    right = left</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        right = right.next</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> right.next:</span><br><span class="line">        right = right.next</span><br><span class="line">        left = left.next</span><br><span class="line">    </span><br><span class="line">    left.next = left.next.next</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a>206. Reverse Linked List</h2><h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><ul><li>None -&gt; 1 -&gt; 2</li><li>None &lt;- 1    2</li><li>None &lt;- 1 &lt;- 2</li></ul><p>The key is use a pointer to track <code>2</code> while adjusting <code>1.next</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        cur = head</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            nex = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = nex</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure></p><h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">pre: ListNode, cur:ListNode</span>) -&gt; ListNode:</span>    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        nex = cur.next</span><br><span class="line">        cur.next = pre</span><br><span class="line">        reverse(cur, nex)  </span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">while</span> tail.next:</span><br><span class="line">        tail = tail.next</span><br><span class="line">    </span><br><span class="line">    reverse(<span class="literal">None</span>, head)</span><br><span class="line">    <span class="keyword">return</span> tail</span><br></pre></td></tr></table></figure><h2 id="21-Merge-Two-Sorted-Lists"><a href="#21-Merge-Two-Sorted-Lists" class="headerlink" title="21. Merge Two Sorted Lists"></a>21. Merge Two Sorted Lists</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    cur = ListNode()</span><br><span class="line">    dummy = cur</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        cur.next = ListNode()</span><br><span class="line">        cur = cur.next</span><br><span class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">            cur.val = l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur.val = l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">    </span><br><span class="line">    cur.next = l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="234-Palindrome-Linked-List"><a href="#234-Palindrome-Linked-List" class="headerlink" title="234. Palindrome Linked List"></a>234. Palindrome Linked List</h2><p>O(n) time<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class="line">    vals = []</span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        l += <span class="number">1</span></span><br><span class="line">        vals.append(head.val)</span><br><span class="line">        head = head.next</span><br><span class="line">    a = vals[:l // <span class="number">2</span>]</span><br><span class="line">    b = vals[l // <span class="number">2</span> + l % <span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">return</span> a == b[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a>141. Linked List Cycle</h2><p>Technically is a hash table. tag visited.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class="line">    cur = ListNode(next=head)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># set cur val to None if visited</span></span><br><span class="line">    <span class="keyword">while</span> cur.next:</span><br><span class="line">        cur = cur.next</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cur.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        cur.val = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><p>Two pointers solution<br>This solution is more like an intelligence test. 🙃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    slow = head</span><br><span class="line">    fast = head.next</span><br><span class="line">    <span class="keyword">while</span> (slow != fast):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast <span class="keyword">or</span> <span class="keyword">not</span> fast.next:</span><br><span class="line">            <span class="comment"># reach an end</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="203-Remove-Linked-List-Elements"><a href="#203-Remove-Linked-List-Elements" class="headerlink" title="203. Remove Linked List Elements"></a>203. Remove Linked List Elements</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span>(<span class="params">self, head: ListNode, val: int</span>) -&gt; ListNode:</span></span><br><span class="line">    dummy = ListNode(next=head)</span><br><span class="line">    pre = dummy</span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="keyword">if</span> cur.val == val:</span><br><span class="line">            pre.next = cur.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = pre.next</span><br><span class="line">        cur = pre.next</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a>83. Remove Duplicates from Sorted List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    dummy = ListNode(next=head)</span><br><span class="line">    pre, cur = dummy, head</span><br><span class="line">    val = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="keyword">if</span> val == <span class="literal">None</span> <span class="keyword">or</span> cur.val != val:</span><br><span class="line">            val = cur.val</span><br><span class="line">            pre = cur</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre.next = cur.next</span><br><span class="line">        cur = cur.next</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    dummy = ListNode()</span><br><span class="line">    cur = dummy</span><br><span class="line">    carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">or</span> l2:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            l1 = ListNode(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            l2 = ListNode(<span class="number">0</span>)</span><br><span class="line">        val = l1.val + l2.val + carry</span><br><span class="line">        carry = val // <span class="number">10</span>            </span><br><span class="line">        cur.next = ListNode(val % <span class="number">10</span>)</span><br><span class="line">        cur = cur.next</span><br><span class="line">        l1 = l1.next</span><br><span class="line">        l2 = l2.next</span><br><span class="line">    <span class="keyword">if</span> carry:</span><br><span class="line">        cur.next = ListNode(carry)</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="876-Middle-of-the-Linked-List"><a href="#876-Middle-of-the-Linked-List" class="headerlink" title="876. Middle of the Linked List"></a>876. Middle of the Linked List</h2><p>O(n) time<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">middleNode</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    mid = head</span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        l += <span class="number">1</span></span><br><span class="line">        cur = cur.next</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l % <span class="number">2</span>:</span><br><span class="line">            mid = mid.next</span><br><span class="line">    <span class="keyword">return</span> mid</span><br></pre></td></tr></table></figure></p><h2 id="369-Plus-One-Linked-List"><a href="#369-Plus-One-Linked-List" class="headerlink" title="369. Plus One Linked List"></a>369. Plus One Linked List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plusOne</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span>(<span class="params">node</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.next:</span><br><span class="line">            val = node.val + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            val = node.val + helper(node.next)</span><br><span class="line">        node.val = val % <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> val // <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ListNode(<span class="number">1</span>, head) <span class="keyword">if</span> helper(head) <span class="keyword">else</span> head</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Leetcode linked list problem collection (1)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;19.Remove Nth Node From End of List&lt;/li&gt;
&lt;li&gt;206.Reverse Linked List&lt;/li&gt;
&lt;li&gt;21.Merge Two Sorted Lists&lt;/li&gt;
&lt;li&gt;234.Palindrome Linked List&lt;/li&gt;
&lt;li&gt;141.Linked List Cycle&lt;/li&gt;
&lt;li&gt;203.Remove Linked List Elements&lt;/li&gt;
&lt;li&gt;83.Remove Duplicates from Sorted List&lt;/li&gt;
&lt;li&gt;2.Add Two Numbers&lt;/li&gt;
&lt;li&gt;876.Middle of the Linked List&lt;/li&gt;
&lt;li&gt;369.Plus One Linked List&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Algorithm" scheme="http://testsiling.github.io/tags/Algorithm/"/>
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
    <category term="Leetcode" scheme="http://testsiling.github.io/tags/Leetcode/"/>
    
    <category term="Linked List" scheme="http://testsiling.github.io/tags/Linked-List/"/>
    
    <category term="Two Pointers" scheme="http://testsiling.github.io/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Docker Container</title>
    <link href="http://testsiling.github.io/2020/10/22/docker-1/"/>
    <id>http://testsiling.github.io/2020/10/22/docker-1/</id>
    <published>2020-10-22T18:07:36.000Z</published>
    <updated>2020-10-22T18:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I heard the words, <em>container</em>, and <em>docker</em> a lot. I know they refer to a tool related to Dev/Ops, but I never use one before. Recently I am writing a tool to find the best apartment (rent goes down since COVID19). Then I I think probably I should use docker in the apt finder project. This article is the first glimpse of docker. I would say it’s magical. </p><a id="more"></a><h2 id="What’s-Docker"><a href="#What’s-Docker" class="headerlink" title="What’s Docker?"></a>What’s Docker?</h2><p>Container is a solution of isolating &amp; running different applications on the same infrasturcture.<br><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p><p>Docker is a type of containers.</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>Full tutorial: <a href="https://www.docker.com/101-tutorial">https://www.docker.com/101-tutorial</a></p><h3 id="Getting-Start-Container"><a href="#Getting-Start-Container" class="headerlink" title="Getting Start Container"></a>Getting Start Container</h3><ol><li><p>Create Dockerfile</p><p>A Dockerfile is simply a text-based script of instructions that is used to create a container image.</p></li><li><p>Run it!</p><p>Running the new container in “detached” mode (in the background) and creating a mapping between the host’s port 3000 to the container’s port 3000. </p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line">docker run -dp <span class="number">3000</span>:<span class="number">3000</span> &lt;app name&gt;</span><br></pre></td></tr></table></figure><h3 id="Updating-App"><a href="#Updating-App" class="headerlink" title="Updating App"></a>Updating App</h3><ol><li><p>Change source code. </p></li><li><p>Build new image. </p></li><li><p>Find the old container’s id, stop it, remove it. </p></li><li><p>Run the new image.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">docker stop &lt;the-container-id&gt;</span><br><span class="line">docker rm &lt;the-container-id&gt;</span><br><span class="line"></span><br><span class="line">docker run -dp 3000:3000 docker-101</span><br></pre></td></tr></table></figure><h3 id="Sharing-App"><a href="#Sharing-App" class="headerlink" title="Sharing App"></a>Sharing App</h3><ol><li><p>Create repo on <a href="https://hub.docker.com/">https://hub.docker.com/</a> </p><p>for example, <em>101-todo-app</em></p></li><li><p>Login from local</p></li><li><p>Give image a new name</p></li><li><p>Push it.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag docker-101 YOUR-USER-NAME/101-todo-app</span><br><span class="line">docker push YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><ol><li>Running image on new instance</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><h3 id="Persisting-DB"><a href="#Persisting-DB" class="headerlink" title="Persisting DB"></a>Persisting DB</h3><p>to-do app as example. Docker will save data file on the host machine and make it available to the next container. Docker maintains the physical location on the disk and you only need to remember the name of the volume. </p><ol><li>create volume</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create todo-db</span><br></pre></td></tr></table></figure><ol><li><p>stop the previous todo app container</p></li><li><p>Start a new todo app container with [<strong>-v</strong>]</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 -v todo-db:/etc/todos YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><ol><li>add items into todo list. then stop and remove the container.</li><li><p>start a new container with the same <strong>run</strong> command above</p></li><li><p>use <code>docker volume inspect todo-db</code> to check The <code>Mountpoint</code> is the actual location on the disk where the data is stored.</p></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://www.docker.com/101-tutorial">https://www.docker.com/101-tutorial</a></p></li><li><p><a href="https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504">https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504</a></p></li><li><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;I heard the words, &lt;em&gt;container&lt;/em&gt;, and &lt;em&gt;docker&lt;/em&gt; a lot. I know they refer to a tool related to Dev/Ops, but I never use one before. Recently I am writing a tool to find the best apartment (rent goes down since COVID19). Then I I think probably I should use docker in the apt finder project. This article is the first glimpse of docker. I would say it’s magical. &lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://testsiling.github.io/tags/docker/"/>
    
    <category term="container" scheme="http://testsiling.github.io/tags/container/"/>
    
    <category term="devops" scheme="http://testsiling.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Closure and Decorator in Python</title>
    <link href="http://testsiling.github.io/2020/05/04/python1/"/>
    <id>http://testsiling.github.io/2020/05/04/python1/</id>
    <published>2020-05-05T02:48:44.000Z</published>
    <updated>2020-05-05T02:48:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><p>function wraps function. When you want to save state of a function but don’t want to write a decent class, use closure.<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_counter</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line"><span class="keyword">nonlocal</span> total</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>then you can use it to count student amount of different classes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">math = new_counter()</span><br><span class="line">tennis = new_counter()</span><br><span class="line"></span><br><span class="line">math(), math(), math(), math(), math(), math()</span><br><span class="line">tennis(), tennis()</span><br></pre></td></tr></table></figure><p>When closure search a variables, Local -&gt; enclosing -&gt; global -&gt; builtin.<br>In the example, <code>total</code> stores in enclosing level.</p><h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><p>Decorator wraps a closure with extra function, but won’t change the inner function, it returns a closure.<br>Example, logger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">get_total(ls)</span><br><span class="line"><span class="comment"># calling get_total</span></span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>But decorated function’s function will become pretty confused about its identity. <code>get_total.__name__</code> will return <code>&#39;wrapper&#39;</code>.<br>Use <code>@functools.wraps</code> to preserve original function info.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">@functools.wraps(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">get_total.__name__  <span class="comment"># &#x27;get_total&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Implement-Singleton-by-Decorator"><a href="#Implement-Singleton-by-Decorator" class="headerlink" title="Implement Singleton by Decorator"></a>Implement Singleton by Decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">          instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> Submitted!!!&quot;</span></span><br><span class="line"></span><br><span class="line">c1 = MyClass(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">c2 = MyClass(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c1 == c2  <span class="comment"># True</span></span><br><span class="line">c1.name, c2.name  <span class="comment"># &#x27;hello&#x27;, &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p><em>So the next step, is refactoring my report &amp; log modules in the next sprint.</em></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Closure&quot;&gt;&lt;a href=&quot;#Closure&quot; class=&quot;headerlink&quot; title=&quot;Closure&quot;&gt;&lt;/a&gt;Closure&lt;/h1&gt;&lt;p&gt;function wraps function. When you want to save state of a function but don’t want to write a decent class, use closure.&lt;br&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第 1 篇 - 关于停更，状态更新，续更，和一些屁话</title>
    <link href="http://testsiling.github.io/2020/04/29/beginagain/"/>
    <id>http://testsiling.github.io/2020/04/29/beginagain/</id>
    <published>2020-04-29T21:18:08.000Z</published>
    <updated>2020-04-29T21:18:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>10/26/20 update:<br>Legacy notes except Leetcode practices are recovered</p><hr><a id="more"></a><p>我回来了</p><h1 id="1-为什么停更"><a href="#1-为什么停更" class="headerlink" title="1. 为什么停更?"></a>1. 为什么停更?</h1><p><strong>因为博主电脑被偷啦！偷啦大半年！没钱买新电脑！文章也没有备份全丢啦！</strong></p><p>具体原因是其实是这样的：</p><p>1) 在GitHub page上保存的是用静态网页，用hexo将markdown转成html。之前的markdown都没备份！其实也有尝试过用一些html转md的工具想转回来，效果都挺差的，想说有空自己写一个轮子，结果一直拖到了现在。</p><p>2) 没钱买新的mbp（其实还有因为苹果竟然一直没有出新的13寸mbp就很气）。有一台平时用来打游戏的windows，什么环境都没有，懒得搞。</p><p>3) 之前的最后一篇blog是2019年7月23号，其实从那时候到现在一直都很忙。接下来会说到。</p><p>其实很遗憾的，毕竟之前的blog记录了我整个读master的过程（其实是刷题的过程）。写了42篇屁话，有空的话会写个小工具将它们恢复回来的。</p><h1 id="2-近况-从大学生到社畜的进化过程"><a href="#2-近况-从大学生到社畜的进化过程" class="headerlink" title="2. 近况 - 从大学生到社畜的进化过程"></a>2. 近况 - 从大学生到社畜的进化过程</h1><h3 id="06-2019"><a href="#06-2019" class="headerlink" title="06/2019"></a>06/2019</h3><p>2019年6月中旬硕士毕业。光荣地成为一名<strong>待业者</strong>。 陪家长来美国玩了一圈</p><p><img src="/images/1.jpg" alt="1"></p><h3 id="07-2019"><a href="#07-2019" class="headerlink" title="07/2019"></a>07/2019</h3><p>送走了家长，开始疯狂地改简历，投简历，面试，找工作。7/25面了Comcast，python临时工坑，当天就接了，然后就是等EAD</p><h3 id="08-2019"><a href="#08-2019" class="headerlink" title="08/2019"></a>08/2019</h3><p>看房子，看了好多房子，因为我没车，都在看城里的房子，步行距离能走到公司的那种。最后租了个美术馆附近的apartment，1b1b。</p><p>8/15正式上班。</p><h3 id="09-2019"><a href="#09-2019" class="headerlink" title="09/2019"></a>09/2019</h3><p>9/13中秋节，去了朋友家开趴。结束回家后现被偷啦~ 偷了钱包，里面有现金和卡，还有电脑，还有一些首饰。我住一楼，贼直接将空调挖出来爬进去了，据说当天同一条街上另一家也被偷了。神奇的是后来贼抓到了，警察通知我去领了一堆杂物，包括我大学的校园卡，市一医院的诊疗卡 =_=</p><p>刚tm住进来1个月就被偷啦！觉得太不安全了！两天后就签了比之前贵了很多的公寓！除了没有泳池，其他什么都有！除了贵没有缺点！但觉得贵不是它的缺点！是我的缺点！</p><p>上班每天都很开心，职场简直比我想的要开心太多了，每周日都想着周一要上班就很开心。每天上班都很开心。</p><h3 id="10-2019-12-2019"><a href="#10-2019-12-2019" class="headerlink" title="10/2019 - 12/2019"></a>10/2019 - 12/2019</h3><p>吃喝玩乐，工作，享受自己赚钱的生活。11月感恩节当然是去玩啦，在波多黎各考了潜水证。</p><p>12月圣诞节假期回国了一周。</p><h3 id="01-2020"><a href="#01-2020" class="headerlink" title="01/2020"></a>01/2020</h3><p>1/1从中国回到美国，然后开始上班，然后工作进入了不知道为什么这么忙的季节。每周都加班，有次加班到9点，从debug到当场发脾气，到完全没有脾气只想回家。</p><h3 id="02-2020-till-now"><a href="#02-2020-till-now" class="headerlink" title="02/2020 till now"></a>02/2020 till now</h3><p>COVID-19。1，2月担心国内家人的情况。3，4月到我这边。我从PA有第一起案例那一周开始已经完全WFH了，其他人大概比我要晚一两周左右。怕死。怕被病毒弄死，也怕路上被仇视Asian的人捅死。很烦，带刀出门。朋友说我带刀可能就overkill了，带个胡椒喷雾吧。然后买了三个胡椒喷雾，安心多了。虽然也不出门了。</p><h1 id="为什么续更？"><a href="#为什么续更？" class="headerlink" title="为什么续更？"></a>为什么续更？</h1><p>一句话总结：学了新东西想记录下来。</p><p>这是我真正意义上的第一份工作。学了很多东西，也还有很多需要学，因为covid19也终于有时间可以记下来学了什么。于是决定重新开始。</p><p>还有就是看了一些面试题，发现我啊除了python啥都不会的话真的很难跳槽。</p><p>噢还有我是叨逼叨话痨，就算没人听也想写下来。</p><h1 id="关于工作中的一些感想，以及一些屁话"><a href="#关于工作中的一些感想，以及一些屁话" class="headerlink" title="关于工作中的一些感想，以及一些屁话"></a>关于工作中的一些感想，以及一些屁话</h1><p>我们组程序员一个就4个：一个新招的专门搞DS和优化的，一个大佬负责数据处理和规划比较多的，真正写逻辑代码的大概只有我和一个印度妹同事，而因为COVID19，印度妹同事自从2/28回印度度假之后到现在都还没回到来。搞得只有我在写东西真的好累。写得越多，越发现自己写出来的东西竟然难以置信地垃圾！多么地脆弱！不堪一击！</p><p>很想重构整个项目，等这个季度过了就重构。要好好地设计，写框架。其实我们的底写得很好的，我刚进组的时候有个很好的工程师，后来他走了，我一直在他的基础上缝缝补补。最过分的是需求一直在改！！！以至于原来的框架已经支持不住了。所以又要开始学习啦。</p><p>差不多就这样了。噢还有，今年交了个男朋友。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;10/26/20 update:&lt;br&gt;Legacy notes except Leetcode practices are recovered&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="日常" scheme="http://testsiling.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="Daily" scheme="http://testsiling.github.io/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>Bash Notes</title>
    <link href="http://testsiling.github.io/2019/07/23/bash-notes/"/>
    <id>http://testsiling.github.io/2019/07/23/bash-notes/</id>
    <published>2019-07-23T04:00:00.000Z</published>
    <updated>2019-07-23T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bash stands for “<strong>B</strong>ourne <strong>A</strong>gain <strong>SH</strong>ell”, is a replacement/improvement of the original Bourne shell (sh).</p><a id="more"></a><p>Today finished a phone interview with Comcast and scheduled onsite. They asked me about Bash and OOD/P. </p><p>Then I think I should write a Bash Note so that I can easily look them up next time.</p><p>Cheatsheet: <a href="https://github.com/skywind3000/awesome-cheatsheets">https://github.com/skywind3000/awesome-cheatsheets</a></p><ul><li><p>pwd</p></li><li><p>ssh user@host</p></li><li><p>ssh -p port user@host</p></li><li><p>whoami # return current username</p></li><li><p>passwd # allow current user</p></li><li><p>finger username # Displays information about user.</p></li><li><p>uname -a # show kernel info</p></li><li><p>man command # show manual</p></li><li><p>df # show disk info</p></li><li><p>ps # show your processes</p></li><li><p>kill PID # kill process by process ID</p></li><li><p>killall processname # kill process by process name</p></li><li><p>top # show current process</p></li><li><p>whois domain # get domain info</p></li><li><p>dig domain # get DNS info of a domain</p></li><li><p>wget file # download file</p></li><li><p>scp source_file user@host:directory/target_file # copy file from local to remote</p></li><li><p>copy file from remote host to local</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp user@host:directory/source_file target_file</span><br><span class="line">scp -r user@host:directory/source_folder farget_folder</span><br></pre></td></tr></table></figure></li><li><p>also accepte port</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P port user@host:directory/source_file target_file</span><br></pre></td></tr></table></figure></li></ul><h2 id="Example-of-Shell-programming"><a href="#Example-of-Shell-programming" class="headerlink" title="Example of Shell programming"></a>Example of Shell programming</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">str=<span class="string">&quot;hello world&quot;</span> <span class="comment"># no space before or after =</span></span><br><span class="line"><span class="keyword">function</span> hello &#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">&#125;</span><br><span class="line">hello <span class="string">&quot;<span class="variable">$str</span>&quot;</span> <span class="comment"># use &quot;&quot; to ensure $str be passed as a full string</span></span><br><span class="line"><span class="comment"># some ways to assign variables</span></span><br><span class="line">array[0] = 9</span><br><span class="line">array[1] = 8</span><br><span class="line">array[2] = 7</span><br><span class="line">array=([2]=7 [0]=8 [1]=9)</span><br><span class="line">array(7 8 9)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array[2]&#125;</span> <span class="comment"># show variables with specific index</span></span><br><span class="line"><span class="built_in">unset</span> array</span><br></pre></td></tr></table></figure><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [expression]; <span class="keyword">then</span></span><br><span class="line">    will execute only <span class="keyword">if</span> expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    will execute <span class="keyword">if</span> expression is <span class="literal">false</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span></span><br><span class="line">    pattern1 )</span><br><span class="line">        statements ;;</span><br><span class="line">    pattern2 )</span><br><span class="line">        statements ;;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><p>3 kinds of loop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x := 1 to 10 <span class="keyword">do</span></span><br><span class="line">begin</span><br><span class="line">  statements</span><br><span class="line">end</span><br><span class="line"><span class="keyword">for</span> name [<span class="keyword">in</span> list]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  statements that can use <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> (( initialisation ; ending condition ; update ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  statements...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition; <span class="keyword">do</span></span><br><span class="line">  statements</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until condition; <span class="keyword">do</span></span><br><span class="line">  statements</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -n scriptname <span class="comment"># won&#x27;t run, grammer checking only</span></span><br><span class="line">bash -v scriptname</span><br><span class="line">bash -x scriptname</span><br></pre></td></tr></table></figure><h2 id="something-else"><a href="#something-else" class="headerlink" title="something else"></a>something else</h2><p>edit <strong>.bashrc</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PS1</span> <span class="comment"># shown the current prompts</span></span><br><span class="line">ps1_old=<span class="variable">$PS1</span> <span class="comment"># back up</span></span><br><span class="line">PS1=<span class="string">&quot;😳 \w: &quot;</span></span><br></pre></td></tr></table></figure><p>Then run <strong>source ~/.bashrc</strong> to execute</p><p>If you want to auto load .bashrc when open a new terminal, edit <strong>.bash_profile</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The next line enables shell include .bashrc if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    . <span class="string">&quot;<span class="variable">$HOME</span>/.bashrc&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bash stands for “&lt;strong&gt;B&lt;/strong&gt;ourne &lt;strong&gt;A&lt;/strong&gt;gain &lt;strong&gt;SH&lt;/strong&gt;ell”, is a replacement/improvement of the original Bourne shell (sh).&lt;/p&gt;</summary>
    
    
    
    
    <category term="Bash" scheme="http://testsiling.github.io/tags/Bash/"/>
    
    <category term="Shell" scheme="http://testsiling.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Notes</title>
    <link href="http://testsiling.github.io/2019/06/03/mongodb/"/>
    <id>http://testsiling.github.io/2019/06/03/mongodb/</id>
    <published>2019-06-03T04:00:00.000Z</published>
    <updated>2019-06-03T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>MongoDB is from “Humongous”</p><p>A document-based NoSQL database by MongoDB, Inc.<br><a id="more"></a></p><ul><li>Data is stored in documents in JSON.</li><li>Documents of a similar type are stored in collections.</li><li>Related collections are stored in a database.</li><li>Schemaless</li></ul><p><img src="/images/mongo1.png" alt="mgdb"></p><h2 id="Syntactic-Rule"><a href="#Syntactic-Rule" class="headerlink" title="Syntactic Rule"></a>Syntactic Rule</h2><ul><li>Case-Sensitive – Capitalization matters.</li><li>Semi-colons are not required.</li><li>All <strong>string</strong> data being saved should be in <strong>double quotes</strong>.</li><li>Commands are <strong>space-independent</strong>.</li><li>Comments are indicated by <strong>//</strong></li><li>Data is displayed in the order of insertion order.</li><li>The field names cannot start with the <strong>$</strong> character.</li><li>The field names cannot contain the <strong>.</strong> character.</li></ul><p>Create a database command – “<strong>use</strong>”</p><ul><li>e.g. <strong>use EmployeeDB</strong></li></ul><p>Databases can be displayed by “<strong>show dbs</strong>” command.</p><ul><li><strong>Admin Database</strong> – Records data on database administration issues like users, roles, and privileges for the databases hosted on the server.</li><li><strong>Local Database</strong> – Stores data about the server’s start-up process and the server’s role in sharding operations.</li><li>The Admin and Local database will not store any end-user data.</li><li>use method <strong>db.getName()</strong> to display the database being used.</li></ul><p>Create a collection use <strong>createCollection()</strong> method:</p><ul><li>e.g. <strong>db.createCollection(“newproducts”)</strong></li></ul><p>Collections can be displayed by “<strong>show collections</strong>” command.</p><p>Dropping a collection use <strong>drop()</strong></p><p>e.g.</p><ul><li>Removes the collection “newproducts” along with all its documents: <strong>db.newproducts.drop()</strong></li><li>Delete all the documents in the collection: <strong>db.newproducts.remove({})</strong></li><li>Rename collections, use the method <strong>renameCollection()</strong></li></ul><h3 id="Common-Term-in-MongoDB"><a href="#Common-Term-in-MongoDB" class="headerlink" title="Common Term in MongoDB"></a>Common Term in MongoDB</h3><p><strong>Field</strong>: key-value pair in a document</p><p><strong>_id</strong>:</p><ul><li>mandatory field for every document. If you don;t assign a value, system will assign a random value this it.</li><li>serves as primary key.</li><li>unique valye in the collection</li></ul><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><ul><li>db.collection.insert(<em>document</em>)</li><li>db.collection.insertOne(<em>document</em>)</li><li>db.collection.insertMany([{d1}, {d2}.., {d3}] )</li><li>db.collection.save(<em>document</em>)</li><li>db.collection.update(<em>query ,update , { upsert: true }</em> )</li></ul><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4><ul><li>db.collection.find( <em>query, projection</em> )</li><li>db.collection.findOne(<em>query, projection</em> )</li></ul><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><ul><li>db.collection.update(<em>query ,update, options</em>)</li><li>db.collection.updateOne(<em>query ,update, options</em>)</li><li>db.collection.updateMany(<em>query ,update, options</em>)</li><li>db.collection.replaceOne(<em>query ,replacement, options</em>)</li></ul><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><ul><li>db.collection.remove(<em>query, justOne</em>)</li><li>db.collection.deleteOne( <em>query, options</em>)</li><li>db.collection.deleteMany( <em>query, options</em> )</li><li>db.collection.deleteMany({}) <em>// delete all documents</em></li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><ol><li><p>Download &amp; unzip source code to <strong>cd /usr/local</strong></p></li><li><p>Rename directory to <strong>mongodb</strong></p></li><li><p>Add to PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mongodb/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>Create a database directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span><br><span class="line">sudo chown -R <span class="variable">$USER</span> /data/db</span><br></pre></td></tr></table></figure></li><li><p>Run mongodb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod</span><br><span class="line"><span class="comment"># if doesn&#x27;t set PATH, entry the following directory</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin</span><br><span class="line">sudo ./mongod</span><br></pre></td></tr></table></figure></li><li><p>Open another terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mongodb/bin </span><br><span class="line">$ ./mongo</span><br></pre></td></tr></table></figure></li><li><p><em>if your data directory not /data/db, assign it with —dbpath</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod --dbpath = /data/db</span><br></pre></td></tr></table></figure></li></ol><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="Basic-Manipulation"><a href="#Basic-Manipulation" class="headerlink" title="Basic Manipulation"></a>Basic Manipulation</h3><ol><li><p>Create a collection called “customers”, input data</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.customers.insert(&#123;id: &quot;1&quot;, name : &quot;Bill&quot;, productId: &quot;1&quot;, customerId: &quot;1&quot;, amount: 20.00, state: &quot;PA&quot;&#125;)</span><br><span class="line">db.customers.insert(&#123;id: &quot;2&quot;, name : &quot;Hillary&quot;, productId: &quot;2&quot;, customerId: &quot;2&quot;, amount: 30.00, state: &quot;DC&quot;&#125;)</span><br><span class="line">db.customers.insert(&#123;id: &quot;3&quot;, name : &quot;brian&quot;, productId: &quot;1&quot;, customerId: &quot;3&quot;, amount: 25.00, state: &quot;DC&quot;&#125;)</span><br><span class="line">db.customers.insert(&#123;id: &quot;4&quot;, name : &quot;Donald&quot;, productId: &quot;2&quot;, customerId: &quot;4&quot;, amount: 50.00, state: &quot;PA&quot;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Find the name and amount of all the customers whose state is PA</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customers.find(&#123; state: &quot;PA&quot; &#125;, &#123; name: 1, _id: 0 &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Find the name and state of customers whose name begin with “B” or “b”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customers.find(&#123; name: /^(B|b)/ &#125;)</span><br></pre></td></tr></table></figure></li><li><p>Find the name of customers whose sale amount is greater or equal to 30 but lower than 40</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customers.find( &#123; amount: &#123; $gte: 30, $lt: 40 &#125; &#125; )</span><br></pre></td></tr></table></figure></li><li><p>For each state, find the number of customers and their total amount</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.customers.aggregate( [ </span><br><span class="line">&#123; $group: &#123; </span><br><span class="line">_id: &quot;$state&quot;,</span><br><span class="line">total_amount: &#123; $sum: &quot;$amount&quot; &#125;,</span><br><span class="line">num_of_customers: &#123; $sum: 1 &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">] )</span><br></pre></td></tr></table></figure></li><li><p>To all the documents, increase the salesAmount by 10</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customers.updateMany( &#123;&#125;, &#123; $inc: &#123; &quot;amount&quot;: 10 &#125; &#125; )</span><br></pre></td></tr></table></figure></li><li><p>To all the documents, add the new field called “totalSaleAmount” whose value is defined by saleAmount*1.06 (i.e, add 6% tax)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customers.aggregate( [ &#123;$addFields: &#123;totalSaleAmount: &#123;$multiply: [&quot;$amount&quot;, 1.06] &#125; &#125; &#125; ] )</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>To all the documents whose state is PA, add the new field called “pastPurchase” as an array of products. Document 1 will have [“chair”, “desk”], while Document 4 will have [“chair”, “tablet”, “usb”]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.customers.update(</span><br><span class="line">      &#123; id : &quot;1&quot; &#125;,</span><br><span class="line">      &#123; $set: &#123; &quot;pastPurchase&quot; : [&quot;chair&quot;, &quot;desk&quot;] &#125; &#125;</span><br><span class="line">)</span><br><span class="line">db.customers.update(</span><br><span class="line">      &#123; id : &quot;4&quot; &#125;,</span><br><span class="line">      &#123; $set: &#123; &quot;pastPurchase&quot; : [&quot;chair&quot;, &quot;tablet&quot;, &quot;usb&quot;] &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="MapReduce-Implementation"><a href="#MapReduce-Implementation" class="headerlink" title="MapReduce Implementation"></a>MapReduce Implementation</h3><p>We need to find some aggregated data from a Grocery Store (Giant, ACME etc.,) by their shoppingCarts. The document structure is:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : NumberLong(1),</span><br><span class="line">&quot;name&quot;:&quot;Amelia Watson&quot;,</span><br><span class="line">&quot;shoppingCart&quot; : &quot;Eggs, Milk, Chicken, Bacon&quot;,</span><br><span class="line">&quot;discount&quot;: 1.25</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Input data</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.insert(&#123;name: &quot;Bob&quot;, shoppingCart: &quot;Milk, Corn, Chocolates&quot;, discount: 0.75&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Alice&quot;, shoppingCart: &quot;Milk, Turkey, Apple&quot;, discount: 0&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Trudy&quot;, shoppingCart: &quot;Cheese, Corn, Tomatoes, Ginger, Juice, Pork&quot;, discount: 1.50&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Jacob”, shoppingCart: &quot;Ice Cream, Onions, Tomatoes, Vinegar, Chicken, Fish&quot;, discount: 2.60&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Paul&quot;, shoppingCart: &quot;Cheese, Chocolates, Fish, Bread&quot;&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Jack&quot;, shoppingCart: &quot;Milk, Corn, Fish&quot;, discount: 0.25&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Mary&quot;, shoppingCart: &quot;Milk, Turkey, Apple&quot;, discount: 0&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Kate&quot;, shoppingCart: &quot;Cheese, Apple, Corn, Juice, Pork&quot;, discount: 3.50&#125;);</span><br><span class="line">db.grocery.insert(&#123;name: &quot;Chris&quot;, shoppingCart: &quot;Ice Cream&quot;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Add the fact that you purchased the following items {Apple, Ice Cream, Chocolates} with the discount of $1.25. That is, use your first name as the name of the new document</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.insert(&#123;name: &quot;Celine&quot;, shoppingCart: &quot;Milk, Corn, Chocolates&quot;, discount: 1.25&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Use Map/Reduce function to count all the people who got any discount at all. Show the complete code and output</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.find().pretty()</span><br></pre></td></tr></table></figure></li><li><p>Use Map/Reduce function to count all the people who got any discount at all. Show the complete code and output</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.mapReduce(</span><br><span class="line">function() &#123;</span><br><span class="line">if(this.discount != undefined &amp;&amp; this.discount &gt; 0)&#123;</span><br><span class="line">emit(&quot;count&quot;, 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, // mapper</span><br><span class="line">function(key,<span class="keyword">values</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Array.sum(<span class="keyword">values</span>);</span><br><span class="line">&#125;, // reducer</span><br><span class="line">&#123; out: &quot;discounts&quot; &#125; // output</span><br><span class="line">).find();</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Use Map/Reduce function to count the total value of discounts of all the customers. Show the complete code and output</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.mapReduce(</span><br><span class="line">function() &#123;</span><br><span class="line">if(this.discount != undefined &amp;&amp; this.discount &gt; 0)&#123;</span><br><span class="line">emit(&quot;sum&quot;,this.discount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, // mapper</span><br><span class="line">function(key,<span class="keyword">values</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Array.sum(<span class="keyword">values</span>);</span><br><span class="line">&#125;, // reducer</span><br><span class="line">&#123; out: &quot;discounts&quot; &#125; // output</span><br><span class="line">).find();</span><br></pre></td></tr></table></figure></li><li><p>Use Map/Reduce function to find the number of times an item appears in the cart.</p><p>For example, if Chicken was inserted in 5 documents (5 different Carts), the key value pair generated after map reduce should look like: {Chicken: 5}</p><p>Display the top 5 items most sold:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">db.grocery.mapReduce(</span><br><span class="line">function() &#123;</span><br><span class="line">if(this.shoppingCart != undefined) &#123; </span><br><span class="line">this.shoppingCart.split(&#x27;,&#x27;).forEach(</span><br><span class="line">function (v) &#123;</span><br><span class="line">emit(v.trim(), 1);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, </span><br><span class="line">function(key,<span class="keyword">values</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Array.sum(<span class="keyword">values</span>);</span><br><span class="line">&#125;, </span><br><span class="line">&#123; out: &quot;top5Sellers&quot; &#125;</span><br><span class="line">).find().sort(&#123;value: -1&#125;).limit(5);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;MongoDB is from “Humongous”&lt;/p&gt;
&lt;p&gt;A document-based NoSQL database by MongoDB, Inc.&lt;br&gt;</summary>
    
    
    
    
    <category term="Database" scheme="http://testsiling.github.io/tags/Database/"/>
    
    <category term="NoSQL" scheme="http://testsiling.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>NoSQL Notes</title>
    <link href="http://testsiling.github.io/2019/05/26/nosql/"/>
    <id>http://testsiling.github.io/2019/05/26/nosql/</id>
    <published>2019-05-26T04:00:00.000Z</published>
    <updated>2019-05-26T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL = Not Only SQL</p><a id="more"></a><p><strong>ACID</strong> - Atomic, Consistent, Isolated, Durable</p><p><strong>BASE</strong> - Basic Availability, Soft-state, Eventual consistency</p><h2 id="CAP-Theroem"><a href="#CAP-Theroem" class="headerlink" title="CAP Theroem"></a>CAP Theroem</h2><ul><li>Consistency: Every read receives the most recent value</li><li>Availability: Every request receives a (non-error) response without the guarantee that it contains the most recent write. no downtime.</li><li>Partition Tolerance: The system continues to operate despite an arbitrary number of nodes being dropped.</li></ul><p><img src="/images/cap.png" alt="cap"></p><h2 id="NoSQL-Database"><a href="#NoSQL-Database" class="headerlink" title="NoSQL Database"></a>NoSQL Database</h2><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Key-value Store</th><th style="text-align:left">Column Store</th><th style="text-align:left">Document Store</th><th style="text-align:left">Graph Store</th></tr></thead><tbody><tr><td style="text-align:left">Usage</td><td style="text-align:left">- image stores <br />- Key-tased file systems <br />- Object cache <br />- System designed to scale</td><td style="text-align:left">- Web crawler results <br />- Big data problem with relaxed consistency riles</td><td style="text-align:left">- High variability data <br />- Document search <br />- Web content management <br />- Publishing</td><td style="text-align:left">- Social network <br />- Fraud detection <br />- Relationship heavy data</td></tr><tr><td style="text-align:left">Example</td><td style="text-align:left">Memcache Redis Riak</td><td style="text-align:left">Hbase Cassandra Hypertable</td><td style="text-align:left">MongoDB CoutchDB CouchBase</td><td style="text-align:left">Neo4J InfinteGraph(Objectively)</td></tr></tbody></table></div><h3 id="NoSQL-Models-Key-Value-Systems"><a href="#NoSQL-Models-Key-Value-Systems" class="headerlink" title="NoSQL Models: Key/Value Systems"></a>NoSQL Models: Key/Value Systems</h3><ul><li>A store of two fields: (Key, Value) pairs.</li><li>Only one way to access the data through hashing(Key) = value</li><li>No query language: only get/put/delete/update</li><li>Limited multi-record transactional consistency</li><li>Each row has timestemp</li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul><li>lookup(key) -&gt; value</li><li>lookup(key range) -&gt; value</li><li>getNext -&gt; value</li><li>insert(key, value)</li><li>delete(key)</li></ul><h4 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h4><ul><li>Storing data for customer preferences and profiles</li><li>Customized product recommendations, Ads, coupons</li><li>User profiles</li><li>Using cache to accelerate application responses</li><li>As a cache for heavily accessed but rarely updated data</li></ul><h3 id="NoSQL-Models-Column-Store"><a href="#NoSQL-Models-Column-Store" class="headerlink" title="NoSQL Models: Column Store"></a>NoSQL Models: Column Store</h3><ul><li>Motivated by Google’s BigTable</li><li>Extension of the K/V system, where columns can have a complex structure, rather than a blob value</li><li>Supports complex modeling structure (nested tables, repeating groups, set, list, etc.)</li><li>Big Table, Cassandra, HBase, Vertica, Accumulo, Hypertable, etc</li></ul><h3 id="NoSQL-Models-Document-Store"><a href="#NoSQL-Models-Document-Store" class="headerlink" title="NoSQL Models: Document Store"></a>NoSQL Models: Document Store</h3><ul><li>Similar to Key-value store, but the value is a complete document, such as JSON, XML, etc.</li><li>Any collection of documents such as maps, collections, and scalar values.</li></ul><h3 id="NoSQL-Models-Graph-Databases"><a href="#NoSQL-Models-Graph-Databases" class="headerlink" title="NoSQL Models: Graph Databases"></a>NoSQL Models: Graph Databases</h3><ul><li>Models data in terms of nodes and connections</li><li>Useful for inter-connected data such as communication patterns, social networks, bio interactions.</li><li>Allows us to ask deeper and more complex questions</li><li>Difficult to distribute components of a graph among a network of servers as graphs become larger.</li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><div class="table-container"><table><thead><tr><th style="text-align:left">Advantages</th><th style="text-align:left">Disadvantages</th></tr></thead><tbody><tr><td style="text-align:left">- Utilize the scale-out architecture that supports scalability, fault tolerance, and high availability <br />- Rapid insertion of arbitrary heterogeneous data with schema-on-read <br />- High performance of sequential scan (good for batch-oriented job such as OLAP workload)</td><td style="text-align:left">- Lack of ACID - Not adequate for OLTP workload that requires random access and ACID <br />- Lack of high-level functionality such as SQL, schemas, and secondary indexes</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;NoSQL = Not Only SQL&lt;/p&gt;</summary>
    
    
    
    
    <category term="Big Data" scheme="http://testsiling.github.io/tags/Big-Data/"/>
    
    <category term="Database" scheme="http://testsiling.github.io/tags/Database/"/>
    
    <category term="NoSQL" scheme="http://testsiling.github.io/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce Overview</title>
    <link href="http://testsiling.github.io/2018/08/23/map-reduce/"/>
    <id>http://testsiling.github.io/2018/08/23/map-reduce/</id>
    <published>2018-08-23T04:00:00.000Z</published>
    <updated>2018-08-23T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>MapReduce is a high-level programming model and implementation for processing large scale parallel data.</p><a id="more"></a><p>Imaging you need to count the frequency of words across a tremendous amount of documents. It may take years to calculate the result on a single computer. In fact, you can slice all documents into small pieces of words and put all those small segments of documents into a word counting program, which is what we called Mapper. Lots of mappers run on different computational environment in parallel then output every word’s frequency. The next step is to shuffle all different word key pairs and load them onto adders, which is the reducer. Finally, we will get what we want.</p><p><img src="/images/mapreduce1.png" alt="md"></p><h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>There are 2 phase in MapReduce</p><h3 id="Map-Phase"><a href="#Map-Phase" class="headerlink" title="Map Phase"></a>Map Phase</h3><p>User provides the <strong>MAP</strong> function:</p><p>Input: <strong>(input key, value)</strong></p><p>Ouput: bag of <strong>(intermediate key, value)</strong></p><p>System applies the map function in parallel to all <strong>(input key, value)</strong> pairs in the input file.</p><h3 id="Reduce-Phase"><a href="#Reduce-Phase" class="headerlink" title="Reduce Phase"></a>Reduce Phase</h3><p>User provides the <strong>REDUCE</strong> function:</p><p>Input: <strong>(intermediate key, bag of values)</strong></p><p>Output: bag of output <strong>(values)</strong></p><p>The system will group all pairs with the same intermediate key, and passes the bag of values to the REDUCE function</p><h2 id="Example-Matrix-Multiply-in-MapReduce"><a href="#Example-Matrix-Multiply-in-MapReduce" class="headerlink" title="Example: Matrix Multiply in MapReduce"></a>Example: Matrix Multiply in MapReduce</h2><p>A and B are matrix, </p><p>A has dimensions L,M, </p><p>B has dimensions M,N</p><p>Get output C = A * B</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="In-the-map-phase"><a href="#In-the-map-phase" class="headerlink" title="In the map phase"></a>In the map phase</h4><ul><li>for each element ( i , j ) of A, emit ( ( i , k ), A[ i , j ] ) for k in 1..N</li><li>for each element ( j , k ) of B, emit ( ( i , k ), B[ j , k ] ) for i in 1..L</li></ul><h4 id="In-the-reduce-phase-emit"><a href="#In-the-reduce-phase-emit" class="headerlink" title="In the reduce phase, emit"></a>In the reduce phase, emit</h4><ul><li>key = ( i , k )</li><li>value = Sumj ( A [ i , j ] * B [ j , k ] )</li></ul><h3 id="test-case"><a href="#test-case" class="headerlink" title="test case"></a>test case</h3><script type="math/tex; mode=display">A = \begin{pmatrix} 1 & 2 \\3 & 4 \\ 5 & 6 \\ \end{pmatrix}B = \begin{pmatrix} 0 & 2 \\3 & 4 \\  \end{pmatrix} \\A * B = \begin{pmatrix}1 * 0 + 2 * 3 & 1 * 2 + 2 * 4 \\3 * 0 + 4 * 3 & 3 * 2 + 4 * 4 \\5 * 0 + 6 * 3 & 5 * 2 + 6 * 4\end{pmatrix}=\begin{pmatrix}6 & 8 \\12 & 22 \\18 & 34\end{pmatrix}</script><p>L = 3, M = 2, N = 2</p><p>In computer, it usaully input as a sequence of list [i, j, value]:</p><p>A: <code>[1, 1, 1], [1, 2, 2], [2, 1, 3], [2, 2, 4], [3, 1, 5], [3, 2, 6]</code></p><p>B: <code>[1, 2, 2], [2, 1, 3], [2, 2, 4]</code></p><h4 id="Map-Phase-1"><a href="#Map-Phase-1" class="headerlink" title="Map Phase"></a>Map Phase</h4><div class="table-container"><table><thead><tr><th>A</th><th></th><th>B</th><th></th></tr></thead><tbody><tr><td>key (i, k)</td><td>value</td><td>key (i, k)</td><td>value ()</td></tr><tr><td>(1,1)</td><td>[A(1, 1), 1]</td><td>(1,2)</td><td>[B(1, 2), 2]</td></tr><tr><td>(1,2)</td><td>[A(1, 1), 1]</td><td>(2,2)</td><td>[B(1, 2), 2]</td></tr><tr><td>(1,1)</td><td>[A(1, 2), 2]</td><td>(3,2)</td><td>[B(1, 2), 2]</td></tr><tr><td>(1,2)</td><td>[A(1, 2), 2]</td><td>(1,1)</td><td>[B(2, 1), 3]</td></tr><tr><td>(2,1)</td><td>[A(2, 1), 3]</td><td>(2,1)</td><td>[B(2, 1), 3]</td></tr><tr><td>(2,2)</td><td>[A(2, 1), 3]</td><td>(3,1)</td><td>[B(2, 1), 3]</td></tr><tr><td>(2,1)</td><td>[A(2, 2), 4]</td><td>(1,2)</td><td>[B(2, 2), 4]</td></tr><tr><td>(2,2)</td><td>[A(2, 2), 4]</td><td>(2,2)</td><td>[B(2, 2), 4]</td></tr><tr><td>(3,1)</td><td>[A(3, 1), 5]</td><td>(3,2)</td><td>[B(2, 2), 4]</td></tr><tr><td>(3,2)</td><td>[A(3, 1), 5]</td><td>(1, 1)</td><td>[B(1, 1), 0]</td></tr><tr><td>(3,1)</td><td>[A(3, 2), 6]</td><td>(2, 1)</td><td>[B(1, 1), 0]</td></tr><tr><td>(3,2)</td><td>[A(3, 2), 6]</td><td>(3, 1)</td><td>[B(1, 1), 0]</td></tr></tbody></table></div><h4 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h4><div class="table-container"><table><thead><tr><th style="text-align:left">(1, 1)</th><th style="text-align:left">[A(1, 1), 1]</th><th style="text-align:left">[B(1, 1), 0]</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:left">[A(1, 2), 2]</td><td style="text-align:left">[B(2, 1), 3]</td></tr><tr><td style="text-align:left">(1, 2)</td><td style="text-align:left">[A(1, 1), 1]</td><td style="text-align:left">[B(1, 2), 2]</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[A(1, 2), 2]</td><td style="text-align:left">[B(2, 2), 4]</td></tr><tr><td style="text-align:left">(2, 1)</td><td style="text-align:left">[A(2, 1), 3]</td><td style="text-align:left">[B(1, 1), 0]</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[A(2, 2), 4]</td><td style="text-align:left">[B(2, 1), 3]</td></tr><tr><td style="text-align:left">(2, 2)</td><td style="text-align:left">[A(2, 1), 3]</td><td style="text-align:left">[B(1, 2), 2]</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[A(2, 2), 4]</td><td style="text-align:left">[B(2, 2), 4]</td></tr><tr><td style="text-align:left">(3, 1)</td><td style="text-align:left">[A(3, 1), 5]</td><td style="text-align:left">[B(1, 1), 0]</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[A(3, 2), 6]</td><td style="text-align:left">[B(2, 1), 3]</td></tr><tr><td style="text-align:left">(3, 2)</td><td style="text-align:left">[A(3, 1), 5]</td><td style="text-align:left">[B(1, 2), 2]</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">[A(3, 2), 6]</td><td style="text-align:left">[B(2, 2), 4]</td></tr></tbody></table></div><h4 id="Reduce-Phase-1"><a href="#Reduce-Phase-1" class="headerlink" title="Reduce Phase"></a>Reduce Phase</h4><p>(1,1): 2 * 3 = 6</p><p>(1,2): 1 <em> 2 + 2 </em> 4 = 10</p><p>(2,1): 4 * 3 = 12</p><p>(2,2): 3 <em> 2 + 4 </em> 4 = 22</p><p>(3,1): 6 * 3 = 18</p><p>(3,2): 5 <em> 2 + 6 </em> 4 = 34</p><script type="math/tex; mode=display">C = \begin{pmatrix} 6 & 10 \\12 & 22 \\ 18 & 34 \\ \end{pmatrix}</script><h2 id="Application-Distributes-File-System-DFS"><a href="#Application-Distributes-File-System-DFS" class="headerlink" title="Application - Distributes File System(DFS)"></a>Application - Distributes File System(DFS)</h2><ul><li>For very large files: TBs, PBs</li><li>Each file is partitioned into chunks, typically 64MB</li><li>Each chunk is replicated several times (≥3), on different racks, for fault tolerance</li></ul><p>Implementations:</p><p>• Google’s DFS: GFS, proprietary • Hadoop’s DFS: HDFS, open source</p><h2 id="Extensions-amp-Contemporaries"><a href="#Extensions-amp-Contemporaries" class="headerlink" title="Extensions &amp; Contemporaries"></a>Extensions &amp; Contemporaries</h2><ul><li>Pig: Relational Algebra over Hadoop</li><li>HIVE: SQL over Hadoop</li><li>Impala: SQL over HDFS (uses some HIVE code)</li><li>Cascading: Relational Algebra</li></ul><h2 id="Something-else"><a href="#Something-else" class="headerlink" title="Something else"></a>Something else</h2><p>Finally complete the online course - <a href="https://www.coursera.org/learn/data-manipulation">Data Manipulation at Scale: Systems and Algorithms</a></p><p>Here’s my solution in mapreduce assignment (Week 3 assignment)</p><p><a href="https://github.com/testsiling/Data-Science-at-Scale-Solution">https://github.com/testsiling/Data-Science-at-Scale-Solution</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MapReduce is a high-level programming model and implementation for processing large scale parallel data.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Big Data" scheme="http://testsiling.github.io/tags/Big-Data/"/>
    
  </entry>
  
  <entry>
    <title>Decision Tree</title>
    <link href="http://testsiling.github.io/2018/05/18/decision-tree/"/>
    <id>http://testsiling.github.io/2018/05/18/decision-tree/</id>
    <published>2018-05-18T04:00:00.000Z</published>
    <updated>2018-05-18T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Decision Tree algorithm with example.</p><a id="more"></a><h2 id="Basic-algorithm-greedy-algorithm"><a href="#Basic-algorithm-greedy-algorithm" class="headerlink" title="Basic algorithm (greedy algorithm)"></a>Basic algorithm (greedy algorithm)</h2><p>Tree is constructed in a top-down recursive divide-and-conquer manner.</p><p>At start, all the training examples are at the root.</p><p>Attributes are categorical (if continuous-valued, they are discretized in advance).</p><p>Examples are partitioned recursively based on selected attributes.</p><p>Test attributes are selected on the basis of a heuristic or statistical measure (e.g., information gain).</p><p>When all samples for a given node belong to a same class, or no remaining attributes for further partitioning, or no more samples left, partitioning end.</p><h2 id="Information-Gain-ID3-C4-5"><a href="#Information-Gain-ID3-C4-5" class="headerlink" title="Information Gain (ID3/C4.5)"></a>Information Gain (ID3/C4.5)</h2><p>Information Gain is a attribute selection measure.</p><p>The basic idea is to select the attribute with the highest information gain.</p><p><em>D</em> as a data partition</p><script type="math/tex; mode=display">p_i$$ as the probability that an arbitrary tuple in *D* which belongs to class $$C_i</script><script type="math/tex; mode=display">p_i=\frac{\lvert{C_{i,D}}\rvert}{\lvert{D}\rvert}</script><h4 id="Expected-information"><a href="#Expected-information" class="headerlink" title="Expected information"></a>Expected information</h4><p>(entropy) needed to classify a tuple in <em>D</em></p><script type="math/tex; mode=display">Info(D)=-\sum_{i=1}^{m}p_ilog_2(p_i)</script><h4 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h4><p>needed (after using <em>A</em> to split <em>D</em> into v partitions) to classify <em>D</em></p><script type="math/tex; mode=display">Info_A(D)=-\sum_{j=1}^{v}\frac{\lvert{D_j}\rvert}{\lvert{D}\rvert}*I(D_j)</script><h4 id="Information-gained"><a href="#Information-gained" class="headerlink" title="Information gained"></a>Information gained</h4><p>by branching on attribute <em>A</em></p><script type="math/tex; mode=display">Gain(A) = Info(D)-Info_A(D)</script><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>if we have a database below and want to build a decision tree for “who will buy the computer”</p><p><img src="/images/dt_1.png" alt="dt1"></p><p>Class N: buys_computer = “yes”</p><p>Class M: buys_computer = “no”</p><p>First, select a attribute to calculate the Gain. Here we choose age.</p><div class="table-container"><table><thead><tr><th style="text-align:left">Age</th><th style="text-align:left"><script type="math/tex">N_i</script></th><th style="text-align:left"><script type="math/tex">M_i</script></th><th style="text-align:left"><script type="math/tex">I(N_i, M_i)</script></th></tr></thead><tbody><tr><td style="text-align:left">&lt;= 30</td><td style="text-align:left">2</td><td style="text-align:left">3</td><td style="text-align:left">0.971</td></tr><tr><td style="text-align:left">31-40</td><td style="text-align:left">4</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">&gt; 40</td><td style="text-align:left">3</td><td style="text-align:left">2</td><td style="text-align:left">0.971</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">9</td><td style="text-align:left">5</td><td style="text-align:left">0.940</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{align}Info(D) &= I(9, 5)=-(\frac9{14}log_2(\frac9{14}) + \frac5{14}log_2(\frac5{14})) = 0.94 \\I(2, 3) &= -(\frac2{5}log_2(\frac2{5}) + \frac3{5}log_2(\frac3{5})) = 0.971\\I(4, 0) &= -(\frac4{4}log_2(\frac4{4}) + 0) = 0\\I(3, 2) &= -(\frac3{5}log_2(\frac3{5}) + \frac2{5}log_2(\frac2{5}) = 0.971\\Info_{age}(D) &= \frac5{14}I(2, 3) + \frac4{14}I(4, 0) + \frac5{14}I(3,2) = 0.694\end{align}</script><script type="math/tex; mode=display">\frac5{14}I(2,3)$$ means “age <= 30” has 5 out of 14 samples, with 2 yes and 3 no.Hence:$$Gain(age) = Info(D) - Info_age(D) = 0.94 - 0.694 = 0.246</script><p>Similarly, we have to calculate Gains of other attributes:</p><p>Gain(income) = 0.029</p><p>Gain(student) = 0.151</p><p>Gain(credit, rating) = 0.048</p><p>Finally we get a decision tree below.</p><p><img src="/images/dt_2.png" alt="dt1"></p><h2 id="Gain-Ratio-C4-5"><a href="#Gain-Ratio-C4-5" class="headerlink" title="Gain Ratio (C4.5)"></a>Gain Ratio (C4.5)</h2><p>Gain is another attribute selection measure</p><p>Information gain measure is biased towards attributes with a large number of values. C4.5 (a successor of ID3) uses <strong>gain ratio</strong> to overcome the problem (normalization to information gain)</p><script type="math/tex; mode=display">SplitInfo_A(D) &= -\sum_{j=1}^v(\frac{\lvert{D_j}\rvert}{D} * log_2(\frac{\lvert{D_j}\rvert}{D})) \\GainRatio(A) &= \frac{Gain(A)}{SplitInfo_A(D)}</script><p>For example:</p><script type="math/tex; mode=display">\begin{align}SplitInfo_{income}(D) &= -(\frac4{14}*log_2(\frac4{14}) + \frac6{14}*log_2(\frac6{14}) + \frac4{14}*log_2(\frac4{14})) = 0.926 \\GainRatio(income) &= 0.029/0.926 = 0.031\end{align}</script><p>The attribute with the <strong>maximum</strong> gain ratio is selected as the splitting attribute.</p><h2 id="Gini-index-CART-IBM-IntelligentMiner"><a href="#Gini-index-CART-IBM-IntelligentMiner" class="headerlink" title="Gini index (CART, IBM IntelligentMiner)"></a>Gini index (CART, IBM IntelligentMiner)</h2><p>If a data set <em>D</em> contains examples from n classes, and the <script type="math/tex">p_j</script> is the relative frequency of class j in <em>D</em>, the gini index, <em>gini(D)</em> is defined as <script type="math/tex">gini(D)=1-\sum_{j=1}^np_j^2</script></p><p>If a data set <em>D</em> is split on A into two subsets <em>D1</em> and <em>D2</em>, the gini index is defined as</p><script type="math/tex; mode=display">gini_A(D) = \frac{D_1}{D}gini(D_1)+\frac{D_2}{D}gini(D_2)</script><p>Reduction in impurity:</p><script type="math/tex; mode=display">\Delta gini(A) = gini(D)-gini_A(D)</script><p>The attribute that has the lowest <script type="math/tex">gini_{split}(D)</script> (or the greatest reduction in impurity) is chosen to split the node (need to enumerate all the possible splitting points for each attribute)</p><p>In the example above, <em>D</em> Has 9 tuples in buy_computer = “yes” and 5 in “no”</p><script type="math/tex; mode=display">gini(D) = 1-((\frac9{14})^2+(\frac5{14})^2) = 0.459</script><p>Suppose the attribute income partitions D into D1: {low, medium} = 10 and D2: {high} = 4</p><script type="math/tex; mode=display">\begin{equation}\begin{aligned}gini_{income\in\{low, medium\}}(D) &= \frac{10}{14}gini(D_1)+\frac4{14}gini(D_2) \\&=\frac{10}{14}(1-(\frac{6}{10})^2 - (\frac{4}{10})^2) + \frac{4}{14}(1-(\frac14)^2-(\frac34)^2) \\&= 0.450\\&= gini_{income\in\{high\}}\end{aligned}\end{equation}</script><p>However, <script type="math/tex">gini_{\{medium, high\}}</script> =0,30 ,which is the lowest thus the best.</p><p>All attributes are assumed continuous-valued</p><p>Sometimes we may need other tools, e.g., clustering, to get the possible split values</p><p>Can be modified for categorical attributes</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Information gain: Bias toward multivalued attributes.</p><p>Gain ratio: Tends to prefer unbalanced splits in which one partition is much smaller than the others</p><p>Gini index:</p><ul><li>Bias toward multivalued attributes.</li><li>Hard to deal with the dataset that has large number of classes.</li><li>Tends to favor tests that result in equal-sized partitions and purity in both partitions</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Han, J., Kamber, M., &amp; Pei, J. (2011). <em>Data Mining: Concepts and Techniques</em> (3rd ed.). Burlington: Elsevier Science.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Decision Tree algorithm with example.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
    <category term="Machine Learning" scheme="http://testsiling.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Accuracy, Precision, Recall, F1</title>
    <link href="http://testsiling.github.io/2018/05/18/evaluation/"/>
    <id>http://testsiling.github.io/2018/05/18/evaluation/</id>
    <published>2018-05-18T04:00:00.000Z</published>
    <updated>2018-05-18T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Accuracy, precision, recall, and f1 are 4 common metrics in classification evaluation.</p><a id="more"></a><ul><li>True Negative (TN): case was negative and predicted negative</li><li>True Positive (TP): case was positive and predicted positive</li><li>False Negative (FN): case was positive but predicted negative</li><li>False Positive (FP): case was negative but predicted positive</li></ul><div class="table-container"><table><thead><tr><th></th><th><strong>Predicted Negative</strong></th><th><strong>Predicted Positive</strong></th></tr></thead><tbody><tr><td><strong>Negative Cases</strong></td><td>TN</td><td>FP</td></tr><tr><td><strong>Positive Cases</strong></td><td>FN</td><td>TP</td></tr></tbody></table></div><h2 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h2><p><strong>The percentage of successful prediction</strong></p><script type="math/tex; mode=display">\frac{TN + TP}{TN + FN + TP + FP}</script><h2 id="Precision"><a href="#Precision" class="headerlink" title="Precision"></a>Precision</h2><p><strong>How many seleted items are relevant</strong></p><script type="math/tex; mode=display">\frac{TP}{TP + FP}</script><h2 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h2><p><strong>How many relevant items are selected</strong></p><script type="math/tex; mode=display">\frac{TP}{TP + FN}</script><h2 id="Harmonic-score"><a href="#Harmonic-score" class="headerlink" title="Harmonic score"></a>Harmonic score</h2><p>Sometimes precision and recall is contradictory. For example, if we only found 1 case which is correctly predicted, the precision is 100% while the recall is probably running extremely low.</p><p>Therefore, we might use <strong>Harmonic score</strong>, for merging multiple measures.</p><script type="math/tex; mode=display">f(x_1...x_n) = \frac{n}{\frac1{x_1} + ... + \frac1{x_n}}</script><h3 id="F1-score"><a href="#F1-score" class="headerlink" title="F1 score"></a>F1 score</h3><script type="math/tex; mode=display">f(x, y) = \frac2{\frac1{x} + \frac1{y}}$$ is called harmonic sum.</script><p>F_1 = \frac2{\frac1{recall} + \frac1{precision}} = 2 * \frac{precision ∗ recall}{precision + recall}</p><p><script type="math/tex">symmetric, x,y are same important.</script>f\in(0, 1]<script type="math/tex">when</script>x, y\in [0, 1]$$. <strong>Either x or y increase, f increase</strong>.</p><p><img src="/images/f1.png" alt="f1"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>How Are Precision and Recall Calculated?. Retrieved from <a href="https://www.kdnuggets.com/faq/precision-recall.html">https://www.kdnuggets.com/faq/precision-recall.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Accuracy, precision, recall, and f1 are 4 common metrics in classification evaluation.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
    <category term="Machine Learning" scheme="http://testsiling.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Apriori Algorithm</title>
    <link href="http://testsiling.github.io/2018/05/09/apriori/"/>
    <id>http://testsiling.github.io/2018/05/09/apriori/</id>
    <published>2018-05-09T04:00:00.000Z</published>
    <updated>2018-05-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apriori Algorithm (Agrawal &amp; Srikant, 1994) is one of scalable methods for mining frequent patterns.</p><p>It is a Candidate Generation and Test Approach</p><p>According to the downward closure property of frequent patterns: <strong>If there is any itemset which is infrequent, its superset should not be generated/tested</strong> (Apriori pruning principle)</p><a id="more"></a><h2 id="Apriori-Algorithm-Example"><a href="#Apriori-Algorithm-Example" class="headerlink" title="Apriori Algorithm Example"></a>Apriori Algorithm Example</h2><p><img src="/images/Apriori.png" alt="apriori"></p><p>{B, C, E} is generated from {B, C} and {C, E}</p><p>{A, B, C}, {A, B, E}, {A, C, E} will bot be generated because {A, B} and {A, E} is not popular and have been removed from <script type="math/tex">L_2</script></p><p><script type="math/tex">C_k</script>: Candidate itemset of size k</p><p><script type="math/tex">L_k</script> : frequent itemset of size k</p><h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><ul><li>Multiple scans of transaction database (Slow, high cost)</li><li>Huge number of candidates (a 2000 itemset might generate 200 popular rules.)</li><li>Tedious workload of support counting for candidates.</li></ul><h2 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h2><ul><li>Partition: Scan Database Only Twice (A. Savasere, E. Omiecinski, and S. Navathe. An efficient algorithm for mining association in large databases. In VLDB’95 )</li><li>Hash: Reduce the Number of Candidates (J. Park, M. Chen, and P. Yu. An effective hash-based algorithm for mining association rules. In SIGMOD’95 )</li><li>Sampling for Frequent Patterns (H. Toivonen. Sampling large databases for association rules. In VLDB’96 )</li><li>DIC: Reduce Number of Scans (S. Brin R. Motwani, J. Ullman, and S. Tsur. Dynamic itemset counting and implication rules for market basket data. In SIGMOD’97 )</li><li>FP-Growth</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apriori Algorithm (Agrawal &amp;amp; Srikant, 1994) is one of scalable methods for mining frequent patterns.&lt;/p&gt;
&lt;p&gt;It is a Candidate Generation and Test Approach&lt;/p&gt;
&lt;p&gt;According to the downward closure property of frequent patterns: &lt;strong&gt;If there is any itemset which is infrequent, its superset should not be generated/tested&lt;/strong&gt; (Apriori pruning principle)&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
  </entry>
  
</feed>
