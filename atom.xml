<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BUG DEVELOPER</title>
  
  <subtitle>building the best tool</subtitle>
  <link href="http://testsiling.github.io/atom.xml" rel="self"/>
  
  <link href="http://testsiling.github.io/"/>
  <updated>2020-10-22T18:07:36.000Z</updated>
  <id>http://testsiling.github.io/</id>
  
  <author>
    <name>Siling Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Container</title>
    <link href="http://testsiling.github.io/2020/10/22/docker1/"/>
    <id>http://testsiling.github.io/2020/10/22/docker1/</id>
    <published>2020-10-22T18:07:36.000Z</published>
    <updated>2020-10-22T18:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>I heard the words, <em>container</em>, and <em>docker</em> a lot. I know they refer to a tool related to Dev/Ops, but I never use one before. Recently I am writing a tool to find the best apartment (rent goes down since COVID19). Then I I think probably I should use docker in the apt finder project. This article is the first glimpse of docker. I would say it’s magical. </p><a id="more"></a><h2 id="What’s-Docker"><a href="#What’s-Docker" class="headerlink" title="What’s Docker?"></a>What’s Docker?</h2><p>Container is a solution of isolating &amp; running different applications on the same infrasturcture.<br><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p><p>Docker is a type of containers.</p><h2 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h2><p>Full tutorial: <a href="https://www.docker.com/101-tutorial">https://www.docker.com/101-tutorial</a></p><h3 id="Getting-Start-Container"><a href="#Getting-Start-Container" class="headerlink" title="Getting Start Container"></a>Getting Start Container</h3><ol><li><p>Create Dockerfile</p><p>A Dockerfile is simply a text-based script of instructions that is used to create a container image.</p></li><li><p>Run it!</p><p>Running the new container in “detached” mode (in the background) and creating a mapping between the host’s port 3000 to the container’s port 3000. </p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line">docker run -dp <span class="number">3000</span>:<span class="number">3000</span> &lt;app name&gt;</span><br></pre></td></tr></table></figure><h3 id="Updating-App"><a href="#Updating-App" class="headerlink" title="Updating App"></a>Updating App</h3><ol><li><p>Change source code. </p></li><li><p>Build new image. </p></li><li><p>Find the old container’s id, stop it, remove it. </p></li><li><p>Run the new image.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">docker stop &lt;the-container-id&gt;</span><br><span class="line">docker rm &lt;the-container-id&gt;</span><br><span class="line"></span><br><span class="line">docker run -dp 3000:3000 docker-101</span><br></pre></td></tr></table></figure><h3 id="Sharing-App"><a href="#Sharing-App" class="headerlink" title="Sharing App"></a>Sharing App</h3><ol><li><p>Create repo on <a href="https://hub.docker.com/">https://hub.docker.com/</a> </p><p>for example, <em>101-todo-app</em></p></li><li><p>Login from local</p></li><li><p>Give image a new name</p></li><li><p>Push it.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag docker-101 YOUR-USER-NAME/101-todo-app</span><br><span class="line">docker push YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><ol><li>Running image on new instance</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><h3 id="Persisting-DB"><a href="#Persisting-DB" class="headerlink" title="Persisting DB"></a>Persisting DB</h3><p>to-do app as example. Docker will save data file on the host machine and make it available to the next container. Docker maintains the physical location on the disk and you only need to remember the name of the volume. </p><ol><li>create volume</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create todo-db</span><br></pre></td></tr></table></figure><ol><li><p>stop the previous todo app container</p></li><li><p>Start a new todo app container with [<strong>-v</strong>]</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 -v todo-db:/etc/todos YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><ol><li>add items into todo list. then stop and remove the container.</li><li><p>start a new container with the same <strong>run</strong> command above</p></li><li><p>use <code>docker volume inspect todo-db</code> to check The <code>Mountpoint</code> is the actual location on the disk where the data is stored.</p></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://www.docker.com/101-tutorial">https://www.docker.com/101-tutorial</a></p></li><li><p><a href="https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504">https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504</a></p></li><li><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;I heard the words, &lt;em&gt;container&lt;/em&gt;, and &lt;em&gt;docker&lt;/em&gt; a lot. I know they refer to a tool related to Dev/Ops, but I never use one before. Recently I am writing a tool to find the best apartment (rent goes down since COVID19). Then I I think probably I should use docker in the apt finder project. This article is the first glimpse of docker. I would say it’s magical. &lt;/p&gt;</summary>
    
    
    
    
    <category term="docker" scheme="http://testsiling.github.io/tags/docker/"/>
    
    <category term="container" scheme="http://testsiling.github.io/tags/container/"/>
    
    <category term="devops" scheme="http://testsiling.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Closure and Decorator in Python</title>
    <link href="http://testsiling.github.io/2020/05/04/python1/"/>
    <id>http://testsiling.github.io/2020/05/04/python1/</id>
    <published>2020-05-05T02:48:44.000Z</published>
    <updated>2020-05-05T02:48:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><p>function wraps function. When you want to save state of a function but don’t want to write a decent class, use closure.<br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_counter</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line"><span class="keyword">nonlocal</span> total</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>then you can use it to count student amount of different classes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">math = new_counter()</span><br><span class="line">tennis = new_counter()</span><br><span class="line"></span><br><span class="line">math(), math(), math(), math(), math(), math()</span><br><span class="line">tennis(), tennis()</span><br></pre></td></tr></table></figure><p>When closure search a variables, Local -&gt; enclosing -&gt; global -&gt; builtin.<br>In the example, <code>total</code> stores in enclosing level.</p><h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><p>Decorator wraps a closure with extra function, but won’t change the inner function, it returns a closure.<br>Example, logger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">get_total(ls)</span><br><span class="line"><span class="comment"># calling get_total</span></span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>But decorated function’s function will become pretty confused about its identity. <code>get_total.__name__</code> will return <code>&#39;wrapper&#39;</code>.<br>Use <code>@functools.wraps</code> to preserve original function info.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">@functools.wraps(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">get_total.__name__  <span class="comment"># &#x27;get_total&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Implement-Singleton-by-Decorator"><a href="#Implement-Singleton-by-Decorator" class="headerlink" title="Implement Singleton by Decorator"></a>Implement Singleton by Decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">          instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> Submitted!!!&quot;</span></span><br><span class="line"></span><br><span class="line">c1 = MyClass(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">c2 = MyClass(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c1 == c2  <span class="comment"># True</span></span><br><span class="line">c1.name, c2.name  <span class="comment"># &#x27;hello&#x27;, &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p><em>So the next step, is refactoring my report &amp; log modules in the next sprint.</em></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Closure&quot;&gt;&lt;a href=&quot;#Closure&quot; class=&quot;headerlink&quot; title=&quot;Closure&quot;&gt;&lt;/a&gt;Closure&lt;/h1&gt;&lt;p&gt;function wraps function. When you want to save state of a function but don’t want to write a decent class, use closure.&lt;br&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第 1 篇 - 关于停更，状态更新，续更，和一些屁话</title>
    <link href="http://testsiling.github.io/2020/04/29/beginagain/"/>
    <id>http://testsiling.github.io/2020/04/29/beginagain/</id>
    <published>2020-04-29T21:18:08.000Z</published>
    <updated>2020-04-29T21:18:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>我回来了<br><a id="more"></a></p><h1 id="1-为什么停更"><a href="#1-为什么停更" class="headerlink" title="1. 为什么停更?"></a>1. 为什么停更?</h1><p><strong>因为博主电脑被偷啦！偷啦大半年！没钱买新电脑！文章也没有备份全丢啦！</strong></p><p>具体原因是其实是这样的：</p><p>1) 在GitHub page上保存的是用静态网页，用hexo将markdown转成html。之前的markdown都没备份！其实也有尝试过用一些html转md的工具想转回来，效果都挺差的，想说有空自己写一个轮子，结果一直拖到了现在。</p><p>2) 没钱买新的mbp（其实还有因为苹果竟然一直没有出新的13寸mbp就很气）。有一台平时用来打游戏的windows，什么环境都没有，懒得搞。</p><p>3) 之前的最后一篇blog是2019年7月23号，其实从那时候到现在一直都很忙。接下来会说到。</p><p>其实很遗憾的，毕竟之前的blog记录了我整个读master的过程（其实是刷题的过程）。写了42篇屁话，有空的话会写个小工具将它们恢复回来的。</p><h1 id="2-近况-从大学生到社畜的进化过程"><a href="#2-近况-从大学生到社畜的进化过程" class="headerlink" title="2. 近况 - 从大学生到社畜的进化过程"></a>2. 近况 - 从大学生到社畜的进化过程</h1><h3 id="06-2019"><a href="#06-2019" class="headerlink" title="06/2019"></a>06/2019</h3><p>2019年6月中旬硕士毕业。光荣地成为一名<strong>待业者</strong>。 陪家长来美国玩了一圈</p><p><img src="/images/1.jpg" alt="1"></p><h3 id="07-2019"><a href="#07-2019" class="headerlink" title="07/2019"></a>07/2019</h3><p>送走了家长，开始疯狂地改简历，投简历，面试，找工作。7/25面了Comcast，python临时工坑，当天就接了，然后就是等EAD</p><h3 id="08-2019"><a href="#08-2019" class="headerlink" title="08/2019"></a>08/2019</h3><p>看房子，看了好多房子，因为我没车，都在看城里的房子，步行距离能走到公司的那种。最后租了个美术馆附近的apartment，1b1b。</p><p>8/15正式上班。</p><h3 id="09-2019"><a href="#09-2019" class="headerlink" title="09/2019"></a>09/2019</h3><p>9/13中秋节，去了朋友家开趴。结束回家后现被偷啦~ 偷了钱包，里面有现金和卡，还有电脑，还有一些首饰。我住一楼，贼直接将空调挖出来爬进去了，据说当天同一条街上另一家也被偷了。神奇的是后来贼抓到了，警察通知我去领了一堆杂物，包括我大学的校园卡，市一医院的诊疗卡 =_=</p><p>刚tm住进来1个月就被偷啦！觉得太不安全了！两天后就签了比之前贵了很多的公寓！除了没有泳池，其他什么都有！除了贵没有缺点！但觉得贵不是它的缺点！是我的缺点！</p><p>上班每天都很开心，职场简直比我想的要开心太多了，每周日都想着周一要上班就很开心。每天上班都很开心。</p><h3 id="10-2019-12-2019"><a href="#10-2019-12-2019" class="headerlink" title="10/2019 - 12/2019"></a>10/2019 - 12/2019</h3><p>吃喝玩乐，工作，享受自己赚钱的生活。11月感恩节当然是去玩啦，在波多黎各考了潜水证。</p><p>12月圣诞节假期回国了一周。</p><h3 id="01-2020"><a href="#01-2020" class="headerlink" title="01/2020"></a>01/2020</h3><p>1/1从中国回到美国，然后开始上班，然后工作进入了不知道为什么这么忙的季节。每周都加班，有次加班到9点，从debug到当场发脾气，到完全没有脾气只想回家。</p><h3 id="02-2020-till-now"><a href="#02-2020-till-now" class="headerlink" title="02/2020 till now"></a>02/2020 till now</h3><p>COVID-19。1，2月担心国内家人的情况。3，4月到我这边。我从PA有第一起案例那一周开始已经完全WFH了，其他人大概比我要晚一两周左右。怕死。怕被病毒弄死，也怕路上被仇视Asian的人捅死。很烦，带刀出门。朋友说我带刀可能就overkill了，带个胡椒喷雾吧。然后买了三个胡椒喷雾，安心多了。虽然也不出门了。</p><h1 id="为什么续更？"><a href="#为什么续更？" class="headerlink" title="为什么续更？"></a>为什么续更？</h1><p>一句话总结：学了新东西想记录下来。</p><p>这是我真正意义上的第一份工作。学了很多东西，也还有很多需要学，因为covid19也终于有时间可以记下来学了什么。于是决定重新开始。</p><p>还有就是看了一些面试题，发现我啊除了python啥都不会的话真的很难跳槽。</p><p>噢还有我是叨逼叨话痨，就算没人听也想写下来。</p><h1 id="关于工作中的一些感想，以及一些屁话"><a href="#关于工作中的一些感想，以及一些屁话" class="headerlink" title="关于工作中的一些感想，以及一些屁话"></a>关于工作中的一些感想，以及一些屁话</h1><p>我们组程序员一个就4个：一个新招的专门搞DS和优化的，一个大佬负责数据处理和规划比较多的，真正写逻辑代码的大概只有我和一个印度妹同事，而因为COVID19，印度妹同事自从2/28回印度度假之后到现在都还没回到来。搞得只有我在写东西真的好累。写得越多，越发现自己写出来的东西竟然难以置信地垃圾！多么地脆弱！不堪一击！</p><p>很想重构整个项目，等这个季度过了就重构。要好好地设计，写框架。其实我们的底写得很好的，我刚进组的时候有个很好的工程师，后来他走了，我一直在他的基础上缝缝补补。最过分的是需求一直在改！！！以至于原来的框架已经支持不住了。所以又要开始学习啦。</p><p>差不多就这样了。噢还有，今年交了个男朋友。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我回来了&lt;br&gt;</summary>
    
    
    
    
    <category term="日常" scheme="http://testsiling.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Decision Tree</title>
    <link href="http://testsiling.github.io/2018/05/18/DecisionTree/"/>
    <id>http://testsiling.github.io/2018/05/18/DecisionTree/</id>
    <published>2018-05-18T04:00:00.000Z</published>
    <updated>2018-05-18T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Decision Tree algorithm with example.</p><a id="more"></a><h2 id="Basic-algorithm-greedy-algorithm"><a href="#Basic-algorithm-greedy-algorithm" class="headerlink" title="Basic algorithm (greedy algorithm)"></a>Basic algorithm (greedy algorithm)</h2><p>Tree is constructed in a top-down recursive divide-and-conquer manner.</p><p>At start, all the training examples are at the root.</p><p>Attributes are categorical (if continuous-valued, they are discretized in advance).</p><p>Examples are partitioned recursively based on selected attributes.</p><p>Test attributes are selected on the basis of a heuristic or statistical measure (e.g., information gain).</p><p>When all samples for a given node belong to a same class, or no remaining attributes for further partitioning, or no more samples left, partitioning end.</p><h2 id="Information-Gain-ID3-C4-5"><a href="#Information-Gain-ID3-C4-5" class="headerlink" title="Information Gain (ID3/C4.5)"></a>Information Gain (ID3/C4.5)</h2><p>Information Gain is a attribute selection measure.</p><p>The basic idea is to select the attribute with the highest information gain.</p><p><em>D</em> as a data partition</p><script type="math/tex; mode=display">p_i$$ as the probability that an arbitrary tuple in *D* which belongs to class $$C_i</script><script type="math/tex; mode=display">p_i=\frac{\lvert{C_{i,D}}\rvert}{\lvert{D}\rvert}</script><h4 id="Expected-information"><a href="#Expected-information" class="headerlink" title="Expected information"></a>Expected information</h4><p>(entropy) needed to classify a tuple in <em>D</em></p><script type="math/tex; mode=display">Info(D)=-\sum_{i=1}^{m}p_ilog_2(p_i)</script><h4 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h4><p>needed (after using <em>A</em> to split <em>D</em> into v partitions) to classify <em>D</em></p><script type="math/tex; mode=display">Info_A(D)=-\sum_{j=1}^{v}\frac{\lvert{D_j}\rvert}{\lvert{D}\rvert}*I(D_j)</script><h4 id="Information-gained"><a href="#Information-gained" class="headerlink" title="Information gained"></a>Information gained</h4><p>by branching on attribute <em>A</em></p><script type="math/tex; mode=display">Gain(A) = Info(D)-Info_A(D)</script><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>if we have a database below and want to build a decision tree for “who will buy the computer”</p><p><img src="/images/dt_1.png" alt="dt1"></p><p>Class N: buys_computer = “yes”</p><p>Class M: buys_computer = “no”</p><p>First, select a attribute to calculate the Gain. Here we choose age.</p><div class="table-container"><table><thead><tr><th style="text-align:left">Age</th><th style="text-align:left"><script type="math/tex">N_i</script></th><th style="text-align:left"><script type="math/tex">M_i</script></th><th style="text-align:left"><script type="math/tex">I(N_i, M_i)</script></th></tr></thead><tbody><tr><td style="text-align:left">&lt;= 30</td><td style="text-align:left">2</td><td style="text-align:left">3</td><td style="text-align:left">0.971</td></tr><tr><td style="text-align:left">31-40</td><td style="text-align:left">4</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">&gt; 40</td><td style="text-align:left">3</td><td style="text-align:left">2</td><td style="text-align:left">0.971</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">9</td><td style="text-align:left">5</td><td style="text-align:left">0.940</td></tr></tbody></table></div><script type="math/tex; mode=display">\begin{align}Info(D)=I(9, 5)=-(\frac9{14}log_2(\frac9{14}) + \frac5{14}log_2(\frac5{14})) = 0.94 \\I(2, 3)=-(\frac2{5}log_2(\frac2{5}) + \frac3{5}log_2(\frac3{5})) = 0.971\\I(4, 0)=-(\frac4{4}log_2(\frac4{4}) + 0) = 0\\I(3, 2)=-(\frac3{5}log_2(\frac3{5}) + \frac2{5}log_2(\frac2{5}) = 0.971\\Info_{age}(D) = \frac5{14}I(2, 3) + \frac4{14}I(4, 0) + \frac5{14}I(3,2) = 0.694\end{align}</script><script type="math/tex; mode=display">\frac5{14}I(2,3)$$ means “age <= 30” has 5 out of 14 samples, with 2 yes and 3 no.Hence:$$Gain(age) = Info(D) - Info_age(D) = 0.94 - 0.694 = 0.246</script><p>Similarly, we have to calculate Gains of other attributes:</p><p>Gain(income) = 0.029</p><p>Gain(student) = 0.151</p><p>Gain(credit, rating) = 0.048</p><p>Finally we get a decision tree below.</p><p><img src="/images/dt_2.png" alt="dt1"></p><h2 id="Gain-Ratio-C4-5"><a href="#Gain-Ratio-C4-5" class="headerlink" title="Gain Ratio (C4.5)"></a>Gain Ratio (C4.5)</h2><p>Gain is another attribute selection measure</p><p>Information gain measure is biased towards attributes with a large number of values. C4.5 (a successor of ID3) uses <strong>gain ratio</strong> to overcome the problem (normalization to information gain)</p><script type="math/tex; mode=display">SplitInfo_A(D) = -\sum_{j=1}^v(\frac{\lvert{D_j}\rvert}{D} * log_2(\frac{\lvert{D_j}\rvert}{D})) \\GainRatio(A) = \frac{Gain(A)}{SplitInfo_A(D)}</script><p>For example:</p><script type="math/tex; mode=display">SplitInfo_{income}(D) = -(\frac4{14}*log_2(\frac4{14}) + \frac6{14}*log_2(\frac6{14}) + \frac4{14}*log_2(\frac4{14})) = 0.926 \\GainRatio(income) = 0.029/0.926 = 0.031</script><p>The attribute with the <strong>maximum</strong> gain ratio is selected as the splitting attribute.</p><h2 id="Gini-index-CART-IBM-IntelligentMiner"><a href="#Gini-index-CART-IBM-IntelligentMiner" class="headerlink" title="Gini index (CART, IBM IntelligentMiner)"></a>Gini index (CART, IBM IntelligentMiner)</h2><p>If a data set <em>D</em> contains examples from n classes, and the <script type="math/tex">p_j</script> is the relative frequency of class j in <em>D</em>, the gini index, <em>gini(D)</em> is defined as <script type="math/tex">gini(D)=1-\sum_{j=1}^np_j^2</script></p><p>If a data set <em>D</em> is split on A into two subsets <em>D1</em> and <em>D2</em>, the gini index is defined as</p><script type="math/tex; mode=display">gini_A(D) = \frac{D_1}{D}gini(D_1)+\frac{D_2}{D}gini(D_2)</script><p>Reduction in impurity:</p><script type="math/tex; mode=display">\Delta gini(A) = gini(D)-gini_A(D)</script><p>The attribute that has the lowest <script type="math/tex">gini_{split}(D)</script> (or the greatest reduction in impurity) is chosen to split the node (need to enumerate all the possible splitting points for each attribute)</p><p>In the example above, <em>D</em> Has 9 tuples in buy_computer = “yes” and 5 in “no”</p><script type="math/tex; mode=display">gini(D) = 1-((\frac9{14})^2+(\frac5{14})^2) = 0.459</script><p>Suppose the attribute income partitions D into D1: {low, medium} = 10 and D2: {high} = 4</p><script type="math/tex; mode=display">\begin{align}gini_{income\in\{low, medium\}}(D) \\=\frac{10}{14}gini(D_1)+\frac4{14}gini(D_2) \\=\frac{10}{14}(1-(\frac{6}{10})^2 - (\frac{4}{10})^2) + \frac{4}{14}(1-(\frac14)^2-(\frac34)^2) \\=0.450\\= gini_{income\in\{high\}}\end{align}</script><p>However, <script type="math/tex">gini_{\{medium, high\}}</script> =0,30 ,which is the lowest thus the best.</p><p>All attributes are assumed continuous-valued</p><p>Sometimes we may need other tools, e.g., clustering, to get the possible split values</p><p>Can be modified for categorical attributes</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Information gain: Bias toward multivalued attributes.</p><p>Gain ratio: Tends to prefer unbalanced splits in which one partition is much smaller than the others</p><p>Gini index:</p><ul><li>Bias toward multivalued attributes.</li><li>Hard to deal with the dataset that has large number of classes.</li><li>Tends to favor tests that result in equal-sized partitions and purity in both partitions</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Han, J., Kamber, M., &amp; Pei, J. (2011). <em>Data Mining: Concepts and Techniques</em> (3rd ed.). Burlington: Elsevier Science.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Decision Tree algorithm with example.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
    <category term="Machine Learning" scheme="http://testsiling.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Apriori Algorithm</title>
    <link href="http://testsiling.github.io/2018/05/09/Apriori/"/>
    <id>http://testsiling.github.io/2018/05/09/Apriori/</id>
    <published>2018-05-09T04:00:00.000Z</published>
    <updated>2018-05-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apriori Algorithm (Agrawal &amp; Srikant, 1994) is one of scalable methods for mining frequent patterns.</p><p>It is a Candidate Generation and Test Approach</p><p>According to the downward closure property of frequent patterns: <strong>If there is any itemset which is infrequent, its superset should not be generated/tested</strong> (Apriori pruning principle)</p><a id="more"></a><h2 id="Apriori-Algorithm-Example"><a href="#Apriori-Algorithm-Example" class="headerlink" title="Apriori Algorithm Example"></a>Apriori Algorithm Example</h2><p><img src="/images/Apriori.png" alt="apriori"></p><p>{B, C, E} is generated from {B, C} and {C, E}</p><p>{A, B, C}, {A, B, E}, {A, C, E} will bot be generated because {A, B} and {A, E} is not popular and have been removed from <script type="math/tex">L_2</script></p><p><script type="math/tex">C_k</script>: Candidate itemset of size k</p><p><script type="math/tex">L_k</script> : frequent itemset of size k</p><h3 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h3><ul><li>Multiple scans of transaction database (Slow, high cost)</li><li>Huge number of candidates (a 2000 itemset might generate 200 popular rules.)</li><li>Tedious workload of support counting for candidates.</li></ul><h3 id="Improvement"><a href="#Improvement" class="headerlink" title="Improvement"></a>Improvement</h3><ul><li>Partition: Scan Database Only Twice (A. Savasere, E. Omiecinski, and S. Navathe. An efficient algorithm for mining association in large databases. In VLDB’95 )</li><li>Hash: Reduce the Number of Candidates (J. Park, M. Chen, and P. Yu. An effective hash-based algorithm for mining association rules. In SIGMOD’95 )</li><li>Sampling for Frequent Patterns (H. Toivonen. Sampling large databases for association rules. In VLDB’96 )</li><li>DIC: Reduce Number of Scans (S. Brin R. Motwani, J. Ullman, and S. Tsur. Dynamic itemset counting and implication rules for market basket data. In SIGMOD’97 )</li><li>FP-Growth</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Apriori Algorithm (Agrawal &amp;amp; Srikant, 1994) is one of scalable methods for mining frequent patterns.&lt;/p&gt;
&lt;p&gt;It is a Candidate Generation and Test Approach&lt;/p&gt;
&lt;p&gt;According to the downward closure property of frequent patterns: &lt;strong&gt;If there is any itemset which is infrequent, its superset should not be generated/tested&lt;/strong&gt; (Apriori pruning principle)&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>Frequent Patterns and Association Rules</title>
    <link href="http://testsiling.github.io/2018/05/09/FreqPat/"/>
    <id>http://testsiling.github.io/2018/05/09/FreqPat/</id>
    <published>2018-05-09T04:00:00.000Z</published>
    <updated>2018-05-09T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Frequent pattern is a pattern (a set of items, subsequences, substructures, etc.) that occurs frequently in a data set. It used for finding inherent regularities in data.</p><a id="more"></a><p>Ex. What products were often purchased together? - Beer and diapers (fact) ?!</p><p>Because blue collars usually buy beers on Friday night after work. At that time, their wives will ask them buy some diapers by the way.</p><h2 id="Frequent-Patterns-and-Association-Rules"><a href="#Frequent-Patterns-and-Association-Rules" class="headerlink" title="Frequent Patterns and Association Rules"></a>Frequent Patterns and Association Rules</h2><p>Itemset <script type="math/tex">X = \{x_1, …, x_k\}</script></p><p>Find all the rules X -&gt; Y with minimum support and confidence</p><ul><li>Support s, probability that a transaction contains <script type="math/tex">X \cup Y</script>. Support define the rule is popular or not.</li><li>Confidence c, conditional probability that a transaction having X also contains Y</li></ul><p>Example:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Transaction-id</th><th style="text-align:left">Items bought</th></tr></thead><tbody><tr><td style="text-align:left">10</td><td style="text-align:left">A, B, D</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">A, C, D</td></tr><tr><td style="text-align:left">30</td><td style="text-align:left">A, D, E</td></tr><tr><td style="text-align:left">40</td><td style="text-align:left">B, E, F</td></tr><tr><td style="text-align:left">50</td><td style="text-align:left">B, C, D, E, F</td></tr></tbody></table></div><p>Frequent Patterns: { A:3, B:3, D:4, D:4, E:3, AD:3 }</p><p>We Define <script type="math/tex">sup_{min}=50\%, conf_{min}=50\%</script></p><p>Association rules:</p><ul><li>A -&gt; D: ( s = 3/5, c = 3/3 ) = ( 60% , 100% )</li><li>D -&gt; A: ( s = 3/5, c = 3/4 ) = ( 60% , 75% )</li><li>Therefore, A and D is strongly associated.</li></ul><p>The downward closure property of frequent patterns:<br><strong>Any subset of a frequent itemset must be frequent</strong></p><h2 id="major-scalable-mining-methods"><a href="#major-scalable-mining-methods" class="headerlink" title="major scalable mining methods"></a>major scalable mining methods</h2><ol><li><a href="https://xianyu.life/2018/05/09/Apriori/">Apriori Algorithm (Agrawal &amp; Srikant, 1994)</a></li><li>Freq. pattern growth (Han, Pei &amp; Yin, 2000)</li><li>Vertical data format approach (Zaki &amp; Gouda, 2003)</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Frequent pattern is a pattern (a set of items, subsequences, substructures, etc.) that occurs frequently in a data set. It used for finding inherent regularities in data.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Data Mining" scheme="http://testsiling.github.io/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>DFA &amp; NFA</title>
    <link href="http://testsiling.github.io/2018/04/19/dfa/"/>
    <id>http://testsiling.github.io/2018/04/19/dfa/</id>
    <published>2018-04-19T04:00:00.000Z</published>
    <updated>2018-04-19T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>A note of Drexel CS520 - CS Foundations</p><ul><li>Deterministic Finite Automaton (DFA)</li><li>Nondeterministic Finite Automaton (NFA)</li></ul><a id="more"></a><h2 id="Deterministic-Finite-Automaton-DFA"><a href="#Deterministic-Finite-Automaton-DFA" class="headerlink" title="Deterministic Finite Automaton (DFA)"></a>Deterministic Finite Automaton (DFA)</h2><p>Deterministic Finite Automaton (DFA) is a theoretical model of Computation</p><p>a DFA is a 5-tuple M = (Q,Σ,δ,q,F)</p><ul><li>Q is a finite set of states.</li><li>Σ is a finite set of symbols called the alphabet .</li><li>δ is set of transitions between states.</li><li>q is the start state.</li><li>F a set of accept states. F is a subset of Q.</li></ul><p>A DFA is said to accept and input if it exits in an accept state.</p><p><strong>The DFA’s memory is limited to its states. It cannot solve problems that require more memory.</strong></p><h3 id="Regular-Languages"><a href="#Regular-Languages" class="headerlink" title="Regular Languages"></a>Regular Languages</h3><ul><li>Languages that DFA can accept are called regular languages</li><li>Infinite Regular Languages must have a repeating component.</li><li>This repetition can be done forever because the DFA has a loop.</li></ul><h2 id="Nondeterministic-Finite-Automaton-NFA"><a href="#Nondeterministic-Finite-Automaton-NFA" class="headerlink" title="Nondeterministic Finite Automaton (NFA)"></a>Nondeterministic Finite Automaton (NFA)</h2><p>Nondeterminism: The ability of a machine to have multiple behaviors given the same input. A NFA can have multiple outgoing edges with the same values. It may have missing edges which are assumed to reject. It may have ε edges that are taken without reading any symbols.</p><p><strong>All NFA can be converted to DFA</strong></p><ol><li>Create new states for every combination of original states</li><li>Create a new reject state</li><li>Follow every edge<ul><li>If the edges goes into two states, use the new combination states</li><li>If the edges doesn’t exist, point it to the new reject state</li></ul></li><li>Remove any states that were never used.</li><li>Make accept states</li></ol><p><img src="/images/NFA.png" alt="nfa"></p><p><img src="/images/DFA.png" alt="nfa"></p><h2 id="Regular-Expressions-RegExp"><a href="#Regular-Expressions-RegExp" class="headerlink" title="Regular Expressions (RegExp)"></a>Regular Expressions (RegExp)</h2><p>Regular Expressions are a simple language to explain text patterns.</p><p>Basic Regular Expressions have four components</p><ul><li>Symbols: a single letter to be matched</li><li>Concatenation: Two regexp next to each other need to be found in order</li><li>Union: The | symbol means select either of the two values</li><li>Kleene Star: The ∗ symbol means 0 or more repetitions</li></ul><p>A Regular Expression makes a DFA.</p><p>Order of Operations: ∗, |, concat</p><p>Parenthesis may be used.</p><p><strong>All Regular Expressions are DFA</strong></p><h3 id="RegExp-Examples"><a href="#RegExp-Examples" class="headerlink" title="RegExp Examples"></a>RegExp Examples</h3><ul><li>a|b either a or b</li><li>abb only accepts abb</li><li>(a|b)aa accepts aaa or baa</li><li>a*cc accepts cc,acc,aacc,aaacc,aaaaaacc, etc</li><li>(0|1)<em> 101 (1|0)</em> accepts any binary string containing 101</li></ul><h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><h3 id="Accepts-any-binary-string-containing-exactly-three-1"><a href="#Accepts-any-binary-string-containing-exactly-three-1" class="headerlink" title="Accepts any binary string containing exactly three 1"></a>Accepts any binary string containing exactly three 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># This DFA Accepts the Language</span><br><span class="line"># L&#x3D;&#123; Accepts any binary string containing exactly three 1s &#125;</span><br><span class="line"># Define DFA Properties</span><br><span class="line">symbols&#x3D;(0,1)</span><br><span class="line">states&#x3D;(q1,q2,q3,q4,q5)</span><br><span class="line">start&#x3D;q1</span><br><span class="line">accept&#x3D;(q4)</span><br><span class="line"># Define Transition Table</span><br><span class="line">if q1 and 0 then q1</span><br><span class="line">if q1 and 1 then q2</span><br><span class="line">if q2 and 0 then q2</span><br><span class="line">if q2 and 1 then q3</span><br><span class="line">if q3 and 0 then q3</span><br><span class="line">if q3 and 1 then q4</span><br><span class="line">if q4 and 0 then q4</span><br><span class="line">if q4 and 1 then q5</span><br><span class="line">if q5 and 0 then q5</span><br><span class="line">if q5 and 1 then q5</span><br></pre></td></tr></table></figure><p><img src="/images/Q1.png" alt="q1"></p><h3 id="Accepts-any-binary-string-whose-length-is-a-multiple-of-3-0-3-6-9-…"><a href="#Accepts-any-binary-string-whose-length-is-a-multiple-of-3-0-3-6-9-…" class="headerlink" title="Accepts any binary string whose length is a multiple of 3. (0,3,6,9,…)"></a>Accepts any binary string whose length is a multiple of 3. (0,3,6,9,…)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># L&#x3D;&#123; Accepts any binary string containing exactly three 1s &#125;</span><br><span class="line"># Define DFA Properties</span><br><span class="line">symbols&#x3D;(0,1)</span><br><span class="line">states&#x3D;(q1,q2,q3,q4,q5)</span><br><span class="line">start&#x3D;q1</span><br><span class="line">accept&#x3D;(q4)</span><br><span class="line"># Define Transition Table</span><br><span class="line">if q1 and 0 then q1</span><br><span class="line">if q1 and 1 then q2</span><br><span class="line">if q2 and 0 then q2</span><br><span class="line">if q2 and 1 then q3</span><br><span class="line">if q3 and 0 then q3</span><br><span class="line">if q3 and 1 then q4</span><br><span class="line">if q4 and 0 then q4</span><br><span class="line">if q4 and 1 then q5</span><br><span class="line">if q5 and 0 then q5</span><br><span class="line">if q5 and 1 then q5</span><br></pre></td></tr></table></figure><p><img src="/images/Q2.png" alt="q1"></p><h3 id="Accepts-any-binary-string-that-does-not-contain-the-substring-110"><a href="#Accepts-any-binary-string-that-does-not-contain-the-substring-110" class="headerlink" title="Accepts any binary string that does not contain the substring 110"></a>Accepts any binary string that does not contain the substring 110</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># L&#x3D;&#123;Accepts any binary string that does not contain the substring 110.&#125;</span><br><span class="line">symbols&#x3D;(0,1)</span><br><span class="line">states&#x3D;(q0,q1,q2,q3)</span><br><span class="line">start&#x3D;q0</span><br><span class="line">accept&#x3D;(q0,q1,q2)</span><br><span class="line"># Define Transition Table</span><br><span class="line">if q0 and 0 then q0</span><br><span class="line">if q0 and 1 then q1</span><br><span class="line">if q1 and 0 then q0</span><br><span class="line">if q1 and 1 then q2</span><br><span class="line">if q2 and 0 then q3</span><br><span class="line">if q2 and 1 then q2</span><br><span class="line">if q3 and 0 then q3</span><br><span class="line">if q3 and 1 then q3</span><br></pre></td></tr></table></figure><p><img src="/images/Q3.png" alt="q1"></p><h3 id="Accepts-any-binary-string-that-begins-with-a-1-and-ends-with-a-0"><a href="#Accepts-any-binary-string-that-begins-with-a-1-and-ends-with-a-0" class="headerlink" title="Accepts any binary string that begins with a 1 and ends with a 0"></a>Accepts any binary string that begins with a 1 and ends with a 0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># This DFA Accepts the Language</span><br><span class="line"># L&#x3D;&#123;Accepts any binary string that begins with a 1 and ends with a 0.&#125;</span><br><span class="line">symbols&#x3D;(0,1)</span><br><span class="line">states&#x3D;(q0,q1,q2,q3,q4)</span><br><span class="line">start&#x3D;q0</span><br><span class="line">accept&#x3D;(q3)</span><br><span class="line"># Define Transition Table</span><br><span class="line">if q0 and 0 then q1</span><br><span class="line">if q0 and 1 then q2</span><br><span class="line">if q1 and 0 then q1</span><br><span class="line">if q1 and 1 then q1</span><br><span class="line">if q2 and 0 then q3</span><br><span class="line">if q2 and 1 then q2</span><br><span class="line">if q3 and 0 then q3</span><br><span class="line">if q3 and 1 then q4</span><br><span class="line">if q4 and 0 then q3</span><br><span class="line">if q4 and 1 then q4</span><br></pre></td></tr></table></figure><p><img src="/images/Q4.png" alt="q1"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;A note of Drexel CS520 - CS Foundations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deterministic Finite Automaton (DFA)&lt;/li&gt;
&lt;li&gt;Nondeterministic Finite Automaton (NFA)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="DFA" scheme="http://testsiling.github.io/tags/DFA/"/>
    
    <category term="Computer Science" scheme="http://testsiling.github.io/tags/Computer-Science/"/>
    
    <category term="NFA" scheme="http://testsiling.github.io/tags/NFA/"/>
    
    <category term="RegExp" scheme="http://testsiling.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning(2) Linear Regression</title>
    <link href="http://testsiling.github.io/2018/03/04/ml-lr/"/>
    <id>http://testsiling.github.io/2018/03/04/ml-lr/</id>
    <published>2018-03-04T05:00:00.000Z</published>
    <updated>2018-03-04T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linear Regression<br><a id="more"></a></p><h2 id="Linear-regresssion-with-one-variable"><a href="#Linear-regresssion-with-one-variable" class="headerlink" title="Linear regresssion with one variable."></a>Linear regresssion with one variable.</h2><p>Hypothesis:  <script type="math/tex">hθ(x)=θ_0+θ_1x</script></p><p>Choose and so that is close to y for out training example(x,y)</p><h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><script type="math/tex; mode=display">J(θ_0,θ_1)=\frac1{2m}\sum_{i=1}^n(hθ(x^i)−y^i)</script><p>m = number of training example.</p><p>h = my hypothesis</p><p>y = actual</p><p>Goal: minimize <script type="math/tex">J(θ_0,θ_1)</script></p><p>cost function look like this:</p><p><img src="/images/costFunction.jpg" alt=""></p><h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><p>start with <script type="math/tex">\theta_0,\theta_1</script>. Changing <script type="math/tex">\theta_0,\theta_1</script> to reduce the <script type="math/tex">J(\theta_0,\theta_1)</script>, until we hopefully end up at a minimum.</p><script type="math/tex; mode=display">\begin{align*}repeat\ until\ convergence \{ \\\theta_j := \theta_j - \alpha\frac{d}{d\theta_j}J(θ_0,θ_1) \\(for j=0 and j=1) \\\}\ Simultaneously\ update\ \theta_0\ and\ \theta_1\end{align*}</script><p>α means learning rate. if α is too small, gradient descent can be slow, if α is too large, gradient descent can overshoot the minimum. It mat fail to converge.</p><p><img src="/images/gradientDescent_1.jpg" alt=""></p><h2 id="Feature-Scaling"><a href="#Feature-Scaling" class="headerlink" title="Feature Scaling"></a>Feature Scaling</h2><p>Make sure features are on a similar scale, or else gradient descent will take a long time.<br>Processing every feature into approximately a [-1, 1] range. ( [-3, 3] might also works. )</p><h3 id="Mean-Normalization"><a href="#Mean-Normalization" class="headerlink" title="Mean Normalization"></a>Mean Normalization</h3><p>Replace <script type="math/tex">X_i</script> with <script type="math/tex">\frac{X_i - \mu}{S}</script><br>μ is average value of X<br>S is range ( max - min ), or standard deviation.</p><h2 id="Learning-Rate-α"><a href="#Learning-Rate-α" class="headerlink" title="Learning Rate α"></a>Learning Rate α</h2><ul><li>if α is too small: slow canvergence</li><li>if α is too large: <script type="math/tex">J(\theta)</script> may not decrease on every iteration, may not converge (miss the local optimum).<br>Hence, try α<br>0.001 -&gt; 0.003 -&gt; 0.01 -&gt; 0.03 -&gt; 0.1 -&gt; 0.3 ….<h2 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h2></li></ul><p>Normal equation is a method to solve for θ analytically.</p><script type="math/tex; mode=display">\theta = (X^TX)^{-1}X^Ty</script><p>octave code: pinv(X’ * X) * X’ * y</p><p>If you use normal equation, you don’t need to do feature scaling actually.</p><p><strong>The matrix transpose is very expensive <script type="math/tex">(X^TX)^{−1}</script>​​ needs <script type="math/tex">O(n^3)</script>. Therefore, if the n is large, might be greater than 10000, you should consider gradient descent.</strong></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Andrew Ng. <a href="https://www.coursera.org/learn/machine-learning">https://www.coursera.org/learn/machine-learning</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linear Regression&lt;br&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Machine Learning" scheme="http://testsiling.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning(1) Overview</title>
    <link href="http://testsiling.github.io/2018/03/03/ml-overview/"/>
    <id>http://testsiling.github.io/2018/03/03/ml-overview/</id>
    <published>2018-03-03T05:00:00.000Z</published>
    <updated>2018-03-03T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just a overview<br><a id="more"></a></p><p>Machine Learning definition: Field of study that gives computers the ability to learn without being explicitly programmed (Arthur Samuel, 1959).</p><p>Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E (Tom Mitchell, 1998)</p><p>Machine learning algorithms:</p><ul><li>Supervised Learning</li><li>Unsupervised Learning</li><li>Others: Reinforcement learning, recommender systems.</li></ul><h2 id="Supervised-Learning"><a href="#Supervised-Learning" class="headerlink" title="Supervised Learning"></a>Supervised Learning</h2><p>Means that you already know the right answer, you train the computer to give you the answer that match to the right answer.<br><strong>Supervised Learning Has Labels.</strong></p><ul><li>Regression: Predict continuous valued output, i.e., predicts unknown or missing values</li><li>Classification: Discrete valued output (0, or 1, or 2 …..)<br>trying to map the input variable into discrete categories</li></ul><h2 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h2><p><strong>The class labels of training data is unknown</strong></p><ul><li>Clustering</li><li>Non-clustering</li></ul><h2 id="ML-Based-Data-Mining"><a href="#ML-Based-Data-Mining" class="headerlink" title="ML-Based Data Mining"></a>ML-Based Data Mining</h2><p>Simple theory hierarchy of ML-based quantitative data mining</p><p><img src="images/MLandDM.png" alt="ml"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Andrew Ng. <a href="https://www.coursera.org/learn/machine-learning">https://www.coursera.org/learn/machine-learning</a></p><p>Han, J., Kamber, M., &amp; Pei, J. (2011). Data Mining: Concepts and Techniques (3rd ed.). Burlington: Elsevier Science.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Just a overview&lt;br&gt;</summary>
    
    
    
    
    <category term="Data Science" scheme="http://testsiling.github.io/tags/Data-Science/"/>
    
    <category term="Machine Learning" scheme="http://testsiling.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Three Searching Methods</title>
    <link href="http://testsiling.github.io/2017/11/19/SearchMethods/"/>
    <id>http://testsiling.github.io/2017/11/19/SearchMethods/</id>
    <published>2017-11-19T05:00:00.000Z</published>
    <updated>2017-11-19T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Three ‘guess and check’ methods to search square root and cube root.</p><ol><li>Exhaustive Enumeration</li><li>Bisection Search</li><li>Newton-Raphson (for root finding)</li></ol><a id="more"></a><p><em>Sample Code</em></p><h2 id="Exhaustive-Enumeration"><a href="#Exhaustive-Enumeration" class="headerlink" title="Exhaustive Enumeration"></a>Exhaustive Enumeration</h2><h3 id="Cube-Root"><a href="#Cube-Root" class="headerlink" title="Cube Root"></a>Cube Root</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cube = <span class="number">-64</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">guess = <span class="number">0.0</span></span><br><span class="line">increment = <span class="number">0.0001</span></span><br><span class="line">num_guesses = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> abs(guess**<span class="number">3</span> - cube) &gt;= epsilon <span class="keyword">and</span> abs(guess) &lt;= abs(cube):</span><br><span class="line">    <span class="keyword">if</span> cube &lt; <span class="number">0</span>:</span><br><span class="line">        guess -= increment</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        guess += increment</span><br><span class="line">    num_guesses += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;num_guesses = &#x27;</span>, num_guesses)</span><br><span class="line"><span class="keyword">if</span> abs(guess**<span class="number">3</span> - cube) &gt;= epsilon:</span><br><span class="line">    print(<span class="string">&#x27;Failed on cube root of&#x27;</span>, cube)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;Cube root of &#x27;</span> + str(cube) + <span class="string">&#x27; is &#x27;</span> + str(guess))</span><br></pre></td></tr></table></figure><h2 id="Bisction-search"><a href="#Bisction-search" class="headerlink" title="Bisction search"></a>Bisction search</h2><h3 id="Square-Root"><a href="#Square-Root" class="headerlink" title="Square Root"></a>Square Root</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">25</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">numGuesses = <span class="number">0</span></span><br><span class="line">low = <span class="number">1.0</span></span><br><span class="line">high = x</span><br><span class="line">ans = (low + high) / <span class="number">2.0</span></span><br><span class="line"><span class="keyword">while</span> abs(ans**<span class="number">2</span> - x) &gt;= epsilon:</span><br><span class="line">    print(<span class="string">&#x27;low = &#x27;</span> + str(low) + <span class="string">&#x27; high = &#x27;</span> + str(high) + <span class="string">&#x27; ans = &#x27;</span> + str(ans))</span><br><span class="line">    numGuesses += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> ans**<span class="number">2</span> &lt; x:</span><br><span class="line">        low = ans</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        high = ans</span><br><span class="line">    ans = (low + high) / <span class="number">2.0</span></span><br><span class="line">print(<span class="string">&#x27;numGuesses: &#x27;</span> + str(numGuesses))</span><br><span class="line">print(str(ans) + <span class="string">&#x27; is close to square root of &#x27;</span> + str(x))</span><br></pre></td></tr></table></figure><h3 id="Cube-Root-1"><a href="#Cube-Root-1" class="headerlink" title="Cube Root"></a>Cube Root</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cube = <span class="number">-27</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">numGuesses = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> cube &gt;= <span class="number">0</span>:</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = cube</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    low = cube</span><br><span class="line">    high = <span class="number">0</span></span><br><span class="line">guess = (low + high) / <span class="number">2.0</span></span><br><span class="line"><span class="keyword">while</span> abs(guess**<span class="number">3</span> - cube) &gt;= epsilon:</span><br><span class="line">    print(<span class="string">&#x27;low = &#x27;</span> + str(low) + <span class="string">&#x27; high = &#x27;</span> + str(high) + <span class="string">&#x27; guess = &#x27;</span> + str(guess))</span><br><span class="line">    <span class="keyword">if</span> guess**<span class="number">3</span> &lt; cube:</span><br><span class="line">        low = guess</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        high = guess</span><br><span class="line">    guess = (low + high) / <span class="number">2.0</span></span><br><span class="line">    numGuesses += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;numGuesses: &#x27;</span> + str(numGuesses))</span><br><span class="line">print(str(guess) + <span class="string">&#x27; is close to square root of &#x27;</span> + str(cube))</span><br></pre></td></tr></table></figure><h2 id="Newton-Raphson"><a href="#Newton-Raphson" class="headerlink" title="Newton-Raphson"></a>Newton-Raphson</h2><h3 id="Square-Root-1"><a href="#Square-Root-1" class="headerlink" title="Square Root"></a>Square Root</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Find the square root of 24</span></span><br><span class="line">epsilon = <span class="number">0.01</span></span><br><span class="line">y = <span class="number">24.0</span></span><br><span class="line">guess = y/<span class="number">2.0</span></span><br><span class="line">numGuesses = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> abs(guess**<span class="number">2</span> - y) &gt;= epsilon:</span><br><span class="line">numGuesses += <span class="number">1</span></span><br><span class="line">guess = guess - ( (guess**<span class="number">2</span> - y) / (<span class="number">2</span> * guess) )</span><br><span class="line">print(<span class="string">&#x27;numGuesses = &#x27;</span> + str(numGuesses))</span><br><span class="line">print(<span class="string">&#x27;Square root of &#x27;</span> + str(y) + <span class="string">&#x27; is about &#x27;</span> + str(guess))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Three ‘guess and check’ methods to search square root and cube root.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exhaustive Enumeration&lt;/li&gt;
&lt;li&gt;Bisection Search&lt;/li&gt;
&lt;li&gt;Newton-Raphson (for root finding)&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://testsiling.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>当我重学Database -- 范式(Normal Form)</title>
    <link href="http://testsiling.github.io/2017/11/11/normalform/"/>
    <id>http://testsiling.github.io/2017/11/11/normalform/</id>
    <published>2017-11-11T05:00:00.000Z</published>
    <updated>2017-11-11T05:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Note of Drexel INFO605. </p><a id="more"></a><h2 id="Why-do-we-need-Database-Normalization"><a href="#Why-do-we-need-Database-Normalization" class="headerlink" title="Why do we need Database Normalization?"></a>Why do we need Database Normalization?</h2><p><strong>注意：Normalization这个词只限于本篇，现实生活中人们不会这样叫的</strong></p><p>一般的DB设计是先根据事实，主观地理解，然后画出ERD，然后再将ERD转化成DB schema.</p><p>This design approach thus far has been largely intuitive, reliant upon the intuition and common sense of the database designer. So we need a formal criteria that can unambiguously (or at least less ambiguously) determine why some schemas are better than others.</p><p>也就是，噔噔噔噔～～<strong>范式(Normal Form)</strong>～～</p><p>ER modeling and resulting translations to relational schemas are both <strong>top-down</strong> intuitive database design approaches.</p><p>范式就是相反的，<strong>自下而上</strong>的设计DB的方法啦。通常现实中，程序员先用intuitive approaches设计DB，然后检查设计是否符合范式。</p><h2 id="What-is-the-goal-of-Normalization"><a href="#What-is-the-goal-of-Normalization" class="headerlink" title="What is the goal of Normalization?"></a>What is the goal of Normalization?</h2><ol><li>消除冗余啊！(最最最重要的,占99%)</li><li>让表和属性的含义更清晰</li><li>减少空值</li></ol><p>Any given fact recorded in our database should be stored in only one authoritative location. Maintenance of such facts is thereby eased, as we create / modify / delete them one time and in one place, with none of the problems that can result from keeping multiple copies of the same data.</p><p>当然消除冗余出了能避免各种增删改查的异常外，还能减少硬盘用量，还有数据库也能跑得快一点。</p><p><em>突然想起以前写课程设计，有的人的数据库，插入一个数据需要跑数据库几百遍。不过老师也不管的啦能动就行啦，弄一个Fancy的界面什么的就能高分 (摊手</em></p><h2 id="How-to-Normalize-database"><a href="#How-to-Normalize-database" class="headerlink" title="How to Normalize database?"></a>How to Normalize database?</h2><p>范式有第12345范式，不过一般符合到第三范式(3nd Normal Form)就行了。是向上兼容的，也就是符合第二范式的肯定符合第一范式，符合第三范式的也符合第二第一范式，如此类推。通常只要符合第三范式就够了。不过，有时因为性能问题，你也可以违反第三范式的啦。</p><p><em>Steve说如果遇到第四第五范式的请务必打电话给他，太稀有了他要写进案例。</em></p><h3 id="Functional-Dependency"><a href="#Functional-Dependency" class="headerlink" title="Functional Dependency"></a>Functional Dependency</h3><p>The majority of normalization is based on the concept of <strong>functional dependency</strong>.</p><p>我们用X ➔ Y 来表示Y依赖于X，或者说，X决定Y。也就是，如果确定了X值，就能推出唯一的Y值。</p><p>举例，每一个身份证号的值对应一个人名的姓。例如确定身份证号 “1122” 所对应的人的姓是 “陈” 。相反，姓 “陈” 的并不能对应唯一的身份证号。身份证号就是X，姓就是Y。</p><p>Functional dependencies can involve multiple attributes on the left hand (determining) side:</p><p> Building, Room ➔ SeatingCapacity</p><p><strong>左端，要保持最简化。不要增加非必要的属性。</strong></p><p><strong>右端，只写一种属性。</strong>例如：</p><p>Drexel_Id ➔ LastName</p><p>Drexel_Id ➔ FirstName</p><p><strong>不要</strong>合并写成： Drexel_Id ➔ LastName, FirstName</p><p><strong>Remember that FDs are related to schemas (meanings of attributes) and not the extensions (data instances) available at any given time.</strong></p><p>也就是就算你不知道年收入 (例如Salary为Null)，不代表 SSN ➔ Salary 这个依赖关系不存在。</p><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><p>Some further consideration of <strong>keys</strong> is necessary to fully explain the 1st, 2nd and 3rd normal forms</p><p><em>下面这段不想写的，可是我怕自己回头忘了留个底吧。可以不看，直接跳到举例说明</em></p><ul><li><strong>Superkey</strong>: a set of attributes in a relation that will never have the same value acrosstuples (i.e., that can be used to uniquely identify a tuple)</li><li><strong>Key</strong>: aminimal superkey – if it lost any more attributes, it would no longer be a superkey (would no longer be a unique identifier)</li><li>Any key that could be used as the primary key of a relation schema is called a <strong>candidate key</strong></li><li>The designer chooses one key to be the primary key, and all candidate keys not chosen to be the primary key become known as <strong>alternate keys</strong>.</li><li><strong>Prime attribute</strong>: member of some candidate key in a relation</li><li><strong>Non-prime attribute</strong>: not a member of some candidate key</li></ul><p>Example relation (assume that all students have SSNs):</p><p><strong>Student</strong> (DrexelNumber, SSN, FirstName, LastName)</p><p><strong>Superkeys</strong> : {DrexelNumber, SSN, FirstName, LastName}, {SSN, LastName}, {DrexelNumber}, {SSN},. . .</p><p><strong>Candidate Keys</strong> : {DrexelNumber}, {SSN}</p><p><strong>Primary Key</strong> : {DrexelNumber}</p><p><strong>Alternate Key</strong> :{SSN}</p><p><strong>Prime attribute</strong> : DrexelNumber, SSN</p><p><strong>Non-prime attribute</strong> : FirstName, LastName</p><h2 id="Normal-Form"><a href="#Normal-Form" class="headerlink" title="Normal Form"></a>Normal Form</h2><p>We say that a relation is normalized to the form of the highest normal form that is not violated by the structure of the relation. To remove a violation, we decompose the relation (split it vertically, breaking some columns into a separate table)</p><h3 id="1st-Normal-Form"><a href="#1st-Normal-Form" class="headerlink" title="1st Normal Form"></a>1st Normal Form</h3><p>Relations in 1NF do not have <strong>repeating groups</strong>!</p><p>For example: <strong>Athlete (Bib#, FirstName, LastName, Event1, Event2, Event3, Event4)</strong></p><p>‘Event’ attributes is a repeating group.</p><p>We need to move the repeating group to a separate table (one for each repeating group) along with a copy of the Pirmary Key from the original relation.</p><p><strong>Athlete (Bib#, FirstName, LastName)</strong></p><p><strong>AthleteEvents (Bib#, Event) (note composite PK)</strong></p><p>If a relation does not have a repeating group to start with, then it is already in 1NF </p><h3 id="2nd-Normal-Form"><a href="#2nd-Normal-Form" class="headerlink" title="2nd Normal Form"></a>2nd Normal Form</h3><p>First criterion of 2NF is that the relation meets 1NF.</p><p>2NFdepends upon the concept of full functional dependency which means that we can’t remove any attribute from the lefthand side of the dependency and still have the dependency hold for theremaining attributes.</p><p>前面说过candidate key就是那些可以选做PK的属性，都是唯一标志属性。</p><p>举例，有这样的关系 <strong>Room (Building, RoomNum, SeatingCapacity, ZipCode)</strong></p><p>这样写的话就代表有以下Functional Dependency:</p><p>Building,RoomNum ➔ SeatingCapacity (这是full functional dependency)</p><p>Building,RoomNum ➔ ZipCode (这不是)</p><p>因为事实上，只要有Building就能确定ZipCode，不需要RoomNum，所以不是full functional dependency</p><p>改成符合2NF的话要拆分成两个表，将ZipCode和Building拆出来成另一个表：</p><p><strong>Building (Building, ZipCode)</strong></p><p><strong>Room (Building, RoomNum, SeatingCapacity)</strong></p><p>Building 是 Room表的外键</p><p>Rule: Normalize a relation to 2NF by moving attributes that are not fully functionally dependent on all candidate keys out to a separate relation, along with copies of the prime attributes on which they are dependent (now the PK of the new relation).</p><p>The PK of the new relation leaves a corresponding foreign key in the original relation (Building, in example above)</p><h3 id="3nd-Normal-Form"><a href="#3nd-Normal-Form" class="headerlink" title="3nd Normal Form"></a>3nd Normal Form</h3><p>First criterion of 3NF is that the relation is in 2NF</p><p>3NF relies upon the concept of transitive dependency</p><p>也就是存在关系X ➔ Y，Y ➔ Z，而且Y是non-prime attribute，就存在X ➔ Z（很好理解嘛）</p><p>例如 <strong>Employee(SSN, LastName, DateofBirth, DeptNumber, DeptMgr)</strong></p><p>假设存在 DeptNumber ➔ DeptMgr</p><p>那丛SSN就能得到DeptNumber，就能的得到DeptMgr。</p><p>所以改成符合3NF的关系的话：</p><p>将DeptManager (这是non-prime attributes) 分到一个独立的表，这个表的PK为DeptNumber (中间值)</p><p><strong>Employee (SSN, LastName, DateofBirth, DeptNumber)</strong></p><p><strong>Department (DeptNumber, DeptManager)</strong></p><p>DeptNumber 是 Employee表的外键</p><p>Rule: Normalize a relation to 3NF by moving non-prime attributes that are transitively dependent on any candidate key out to a separate relation, along with copies of the attributes upon which they are non-transitively dependent (these become the PK of the new relation).</p><p>The“Y” (hop) becomes a foreign key in the original relation and points at the PKof the new relation</p><hr><p>Here is a mnemonic: <strong>“The key, the whole key, and nothing but the key.”</strong></p><p>当然有时候我们是需要Denormalization，可以提高读数据库的性能。一般建议先将DB设计成符合3NF的，再按需Denormalization.</p><h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>尝试一步步将下面关系写到符合1NF，2NF，3NF。</p><p>Flight (Route#, Flight#, DestinationAirport, DepartureDate, DepartureTime, Pilot1, Pilot2, Pilot3, PlaneSerial#, Capacity, LastServicedDate)</p><p>Route#, Flight# ➔ (any non-prime attribute in this relation, but maybe transitively)</p><p>Route# ➔ DestinationAirport</p><p>PlaneSerial# ➔ Capacity</p><p>PlaneSerial# ➔ LastServicedDate</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><p>我就不将外键表示出来了。在Markdown很难画我又懒得插图。</p><h4 id="1NF"><a href="#1NF" class="headerlink" title="1NF:"></a>1NF:</h4><p>Flight (Route#, Flight#, DestinationAirport, DepartureDate, DepartureTime, PlaneSerial#, Capacity, LastServicedDate)</p><p>FlightPilot (Route#, Flight#,Pilot)</p><h4 id="2NF"><a href="#2NF" class="headerlink" title="2NF:"></a>2NF:</h4><p>Flight (Route#, Flight#, DepartureDate, DepartureTime, PlaneSerial#, Capacity, LastServicedDate)</p><p>FlightPilot (Route#, Flight#, Pilot)</p><p>Route (Route#, DestinationAirport)</p><h4 id="3NF"><a href="#3NF" class="headerlink" title="3NF:"></a>3NF:</h4><p>Flight (Route#, Flight#, DepartureDate, DepartureTime, PlaneSerial#)</p><p>FlightPilot (Route#, Flight#, Pilot)</p><p>Route (Route#, DestinationAirport)</p><p>Plane (PlaneSerial#, Capacity, LastServicedDate)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Note of Drexel INFO605. &lt;/p&gt;</summary>
    
    
    
    
    <category term="Database" scheme="http://testsiling.github.io/tags/Database/"/>
    
    <category term="Relational Database" scheme="http://testsiling.github.io/tags/Relational-Database/"/>
    
  </entry>
  
</feed>
