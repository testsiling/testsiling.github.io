<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker Container</title>
      <link href="2020/10/22/docker1/"/>
      <url>2020/10/22/docker1/</url>
      
        <content type="html"><![CDATA[<p>I heard the words, <em>container</em>, and <em>docker</em> a lot. I know it’s a useful tool related to Dev/Ops, but I never use one before. Recently I am writing a tool to find best apartment (rent goes down since COVID19), so was thinking probably I should try to use it in this porject. this is a note to myself, the first glimpse of docker. I would said, it’s magical. </p><a id="more"></a><h2 id="What’s-Docker"><a href="#What’s-Docker" class="headerlink" title="What’s Docker?"></a>What’s Docker?</h2><p>Container is a solution of isolating &amp; running different applications on the same infrasturcture.<br><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p><p>Docker is a type of containers.</p><h2 id="Turorial"><a href="#Turorial" class="headerlink" title="Turorial"></a>Turorial</h2><h3 id="Getting-Start-Container"><a href="#Getting-Start-Container" class="headerlink" title="Getting Start Container"></a>Getting Start Container</h3><ol><li><p>Create Dockerfile</p><p>A Dockerfile is simply a text-based script of instructions that is used to create a container image.</p></li><li><p>Run it!</p><p>Running the new container in “detached” mode (in the background) and creating a mapping between the host’s port 3000 to the container’s port 3000. </p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line">docker run -dp <span class="number">3000</span>:<span class="number">3000</span> &lt;app name&gt;</span><br></pre></td></tr></table></figure><h3 id="Updating-App"><a href="#Updating-App" class="headerlink" title="Updating App"></a>Updating App</h3><ol><li><p>Change source code. </p></li><li><p>Build new image. </p></li><li><p>Find the old container’s id, stop it, remove it. </p></li><li><p>Run the new image.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;app name&gt; .</span><br><span class="line"></span><br><span class="line">docker ps</span><br><span class="line">docker stop &lt;the-container-id&gt;</span><br><span class="line">docker rm &lt;the-container-id&gt;</span><br><span class="line"></span><br><span class="line">docker run -dp 3000:3000 docker-101</span><br></pre></td></tr></table></figure><h3 id="Sharing-App"><a href="#Sharing-App" class="headerlink" title="Sharing App"></a>Sharing App</h3><ol><li><p>Create repo on <a href="https://hub.docker.com/">https://hub.docker.com/</a> </p><p>for example, <em>101-todo-app</em></p></li><li><p>Login from local</p></li><li><p>Give image a new name</p></li><li><p>Push it.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker tag docker-101 YOUR-USER-NAME/101-todo-app</span><br><span class="line">docker push YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><ol start="5"><li>Running image on new instance</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 YOUR-USER-NAME/101-todo-app</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><p><a href="https://www.docker.com/101-tutorial">https://www.docker.com/101-tutorial</a></p></li><li><p><a href="https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504">https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504</a></p></li><li><p><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> container </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Closure and Decorator in Python</title>
      <link href="2020/05/04/python1/"/>
      <url>2020/05/04/python1/</url>
      
        <content type="html"><![CDATA[<h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><p>function wraps function. When you want to save state of a function but don’t want to write a decent class, use closure.</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_counter</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>():</span></span><br><span class="line"><span class="keyword">nonlocal</span> total</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>then you can use it to count student amount of different classes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">math = new_counter()</span><br><span class="line">tennis = new_counter()</span><br><span class="line"></span><br><span class="line">math(), math(), math(), math(), math(), math()</span><br><span class="line">tennis(), tennis()</span><br></pre></td></tr></table></figure><p>When closure search a variables, Local -&gt; enclosing -&gt; global -&gt; builtin.<br>In the example, <code>total</code> stores in enclosing level.</p><h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><p>Decorator wraps a closure with extra function, but won’t change the inner function, it returns a closure.<br>Example, logger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">ls = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">get_total(ls)</span><br><span class="line"><span class="comment"># calling get_total</span></span><br><span class="line"><span class="comment"># 45</span></span><br></pre></td></tr></table></figure><p>But decorated function’s function will become pretty confused about its identity. <code>get_total.__name__</code> will return <code>&#39;wrapper&#39;</code>.<br>Use <code>@functools.wraps</code> to preserve original function info.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_logger</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">@functools.wraps(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">print(<span class="string">f&quot;calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@my_logger</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_total</span>(<span class="params">ls</span>):</span></span><br><span class="line"><span class="keyword">return</span> sum(ls)</span><br><span class="line"></span><br><span class="line">get_total.__name__  <span class="comment"># &#x27;get_total&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Implement-Singleton-by-Decorator"><a href="#Implement-Singleton-by-Decorator" class="headerlink" title="Implement Singleton by Decorator"></a>Implement Singleton by Decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">          instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">submit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span> Submitted!!!&quot;</span></span><br><span class="line"></span><br><span class="line">c1 = MyClass(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">c2 = MyClass(<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c1 == c2  <span class="comment"># True</span></span><br><span class="line">c1.name, c2.name  <span class="comment"># &#x27;hello&#x27;, &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p><em>So the next step, is refactoring my report &amp; log modules in the next sprint.</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第 1 篇 - 关于停更，状态更新，续更，和一些屁话</title>
      <link href="2020/04/29/beginagain/"/>
      <url>2020/04/29/beginagain/</url>
      
        <content type="html"><![CDATA[<p>我回来了</p><a id="more"></a><h1 id="1-为什么停更"><a href="#1-为什么停更" class="headerlink" title="1. 为什么停更?"></a>1. 为什么停更?</h1><p><strong>因为博主电脑被偷啦！偷啦大半年！没钱买新电脑！文章也没有备份全丢啦！</strong></p><p>具体原因是其实是这样的：</p><ol><li><p>在GitHub page上保存的是用静态网页，用hexo将markdown转成html。之前的markdown都没备份！其实也有尝试过用一些html转md的工具想转回来，效果都挺差的，想说有空自己写一个轮子，结果一直拖到了现在。</p></li><li><p>没钱买新的mbp（其实还有因为苹果竟然一直没有出新的13寸mbp就很气）。有一台平时用来打游戏的windows，什么环境都没有，懒得搞。</p></li><li><p>之前的最后一篇blog是2019年7月23号，其实从那时候到现在一直都很忙。接下来会说到。</p></li></ol><p>其实很遗憾的，毕竟之前的blog记录了我整个读master的过程（其实是刷题的过程）。写了42篇屁话，有空的话会写个小工具将它们恢复回来的。</p><p><img src="/images/1.PNG" alt="1"></p><h1 id="2-近况-从大学生到社畜的进化过程"><a href="#2-近况-从大学生到社畜的进化过程" class="headerlink" title="2. 近况 - 从大学生到社畜的进化过程"></a>2. 近况 - 从大学生到社畜的进化过程</h1><h3 id="06-2019"><a href="#06-2019" class="headerlink" title="06/2019"></a>06/2019</h3><p>2019年6月中旬硕士毕业。光荣地成为一名<strong>待业者</strong>。 陪家长来美国玩了一圈</p><p><img src="/images/1.jpg" alt="1"></p><h3 id="07-2019"><a href="#07-2019" class="headerlink" title="07/2019"></a>07/2019</h3><p>送走了家长，开始疯狂地改简历，投简历，面试，找工作。7/25面了Comcast，python临时工坑，当天就接了，然后就是等EAD</p><h3 id="08-2019"><a href="#08-2019" class="headerlink" title="08/2019"></a>08/2019</h3><p>看房子，看了好多房子，因为我没车，都在看城里的房子，步行距离能走到公司的那种。最后租了个美术馆附近的apartment，1b1b。</p><p>8/15正式上班。</p><h3 id="09-2019"><a href="#09-2019" class="headerlink" title="09/2019"></a>09/2019</h3><p>9/13中秋节，去了朋友家开趴。结束回家后现被偷啦~ 偷了钱包，里面有现金和卡，还有电脑，还有一些首饰。我住一楼，贼直接将空调挖出来爬进去了，据说当天同一条街上另一家也被偷了。神奇的是后来贼抓到了，警察通知我去领了一堆杂物，包括我大学的校园卡，市一医院的诊疗卡 =_=</p><p>刚tm住进来1个月就被偷啦！觉得太不安全了！两天后就签了比之前贵了很多的公寓！除了没有泳池，其他什么都有！除了贵没有缺点！但觉得贵不是它的缺点！是我的缺点！</p><p>上班每天都很开心，职场简直比我想的要开心太多了，每周日都想着周一要上班就很开心。每天上班都很开心。</p><h3 id="10-2019-12-2019"><a href="#10-2019-12-2019" class="headerlink" title="10/2019 - 12/2019"></a>10/2019 - 12/2019</h3><p>吃喝玩乐，工作，享受自己赚钱的生活。11月感恩节当然是去玩啦，在波多黎各考了潜水证。</p><p>12月圣诞节假期回国了一周。</p><h3 id="01-2020"><a href="#01-2020" class="headerlink" title="01/2020"></a>01/2020</h3><p>1/1从中国回到美国，然后开始上班，然后工作进入了不知道为什么这么忙的季节。每周都加班，有次加班到9点，从debug到当场发脾气，到完全没有脾气只想回家。</p><h3 id="02-2020-till-now"><a href="#02-2020-till-now" class="headerlink" title="02/2020 till now"></a>02/2020 till now</h3><p>COVID-19。1，2月担心国内家人的情况。3，4月到我这边。我从PA有第一起案例那一周开始已经完全WFH了，其他人大概比我要晚一两周左右。怕死。怕被病毒弄死，也怕路上被仇视Asian的人捅死。很烦，带刀出门。朋友说我带刀可能就overkill了，带个胡椒喷雾吧。然后买了三个胡椒喷雾，安心多了。虽然也不出门了。</p><h1 id="为什么续更？"><a href="#为什么续更？" class="headerlink" title="为什么续更？"></a>为什么续更？</h1><p>一句话总结：学了新东西想记录下来。</p><p>这是我真正意义上的第一份工作。学了很多东西，也还有很多需要学，因为covid19也终于有时间可以记下来学了什么。于是决定重新开始。</p><p>还有就是看了一些面试题，发现我啊除了python啥都不会的话真的很难跳槽。</p><p>噢还有我是叨逼叨话痨，就算没人听也想写下来。</p><h1 id="关于工作中的一些感想，以及一些屁话"><a href="#关于工作中的一些感想，以及一些屁话" class="headerlink" title="关于工作中的一些感想，以及一些屁话"></a>关于工作中的一些感想，以及一些屁话</h1><p>我们组程序员一个就4个：一个新招的专门搞DS和优化的，一个大佬负责数据处理和规划比较多的，真正写逻辑代码的大概只有我和一个印度妹同事，而因为COVID19，印度妹同事自从2/28回印度度假之后到现在都还没回到来。搞得只有我在写东西真的好累。写得越多，越发现自己写出来的东西竟然难以置信地垃圾！多么地脆弱！不堪一击！</p><p>很想重构整个项目，等这个季度过了就重构。要好好地设计，写框架。其实我们的底写得很好的，我刚进组的时候有个很好的工程师，后来他走了，我一直在他的基础上缝缝补补。最过分的是需求一直在改！！！以至于原来的框架已经支持不住了。所以又要开始学习啦。</p><p>差不多就这样了。噢还有，今年交了个男朋友。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
